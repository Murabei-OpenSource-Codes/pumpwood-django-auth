window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pumpwood_djangoauth", "modulename": "pumpwood_djangoauth", "kind": "module", "doc": "<h1 id=\"pumpwood-models-for-auth-and-internals\">Pumpwood models for auth and internals.</h1>\n\n<p>Pumpwood Django Auth implements base models for Pumpwood systems. It is\nimplemented models that perform authetication, MFA validation, Kong service\nmesh integration, logs generation and Metabase dashboard deploy.</p>\n\n<h2 id=\"enviroment-variables\">Enviroment variables</h2>\n\n<p><code>config</code> modele is reponsible for defining singletons that are used through\npumpwood auth for rabbitmq, other pumpwood microservice and storage connection.\nIt also defines an object kong interaction that can be set as None during\napp development.</p>\n\n<ul>\n<li><strong>API_GATEWAY_URL:</strong> Correpond to Kong admin end-point. It is used to\nregister new services and routes for auth and other microservice using\n<code>KongService</code> and <code>KongRoute</code> model class. Ex.:\n<code>http://load-balancer:8001/</code> when kong is deployed locally as\n<code>load-balancer</code> on docker-compose.</li>\n<li><strong>MICROSERVICE_NAME:</strong> It is a default name for microservice that is\nused by app to comunicate with other microservices. This string is usually\nused for debug purposes and does not modify behavior of the application.\nEx.: <code>microservice-auth</code>.</li>\n<li><strong>MICROSERVICE_URL:</strong> Url of Kong end-point that redirect requests to other\nmicroservices. Ex.: <code>http://load-balancer:8000/</code> when Kong is deployed\nlocally as <code>load-balancer</code>.</li>\n<li><strong>MICROSERVICE_USERNAME:</strong> User name of the service user used by auth app\nto comunicate with other microservice. Ex.: <code>microservice--auth</code>.\nUsers flaged as service users are not allowed to login from outside of the\napplication cluster.</li>\n<li><strong>MICROSERVICE_PASSWORD:</strong> Password associated with the service user used\nby application to communcati with other Pumpwood Microservice. It is a\ngood pratice to set a strong password for service users, although they\nare not avaiable for login outside of the cluster.</li>\n<li><strong>STORAGE_TYPE:</strong> Storage type that will be used store flat files on buckets,\nS3 or blob storage. Today it is possible to use <code>google_bucket</code>,\n<code>aws_s3</code> or <code>azure_storage</code>, for more information check documentation\nof <code>pumpwood_miscellaneous</code> package.</li>\n<li><strong>STORAGE_BUCKET_NAME:</strong> Name of the bucket, blob storage or S3. For more\ninformation check  documentation of <code>pumpwood_miscellaneous</code> package.</li>\n<li><strong>STORAGE_BASE_PATH='pumpwood_auth':</strong> Base path that will be used to store\ninformation on flat storage. If not set <code>pumpwood_auth</code>, there is\nusually no need to set a different value.</li>\n<li><strong>MEDIA_URL:</strong> It is the default media path URL. It is used to set a route\nfor media end-point on Pumpwood. It is <code>media/</code> if not set, usually no\nneed to change that.</li>\n<li><strong>PUMPWOOD_AUTH_IS_RABBITMQ_LOG=FALSE:</strong> Set if RabbitMQ should be used to\nqueue loging of pumpwood. If not set to 'TRUE' pumpwood auth will send\nPumpwood logs to stdout.</li>\n</ul>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To use pumpwood auth it is necessary to correcly configure Django settings,\nadd routes to Kong and add end-point URLs to application.</p>\n\n<h3 id=\"django-settings\">Django settings</h3>\n\n<p>To use Pumpwood Django Auth it is necessary to add models to installed\napps at settings and configure rest framework and knox settings\ndictionary.</p>\n\n<p>Pumpwood Auth uses knox to generate tokens for user authetication,\nrest framework for end-points creation. It prefereble</p>\n\n<h4 id=\"installed_apps\">INSTALLED_APPS</h4>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># Admin APPs</span>\n    <span class=\"s1\">&#39;flat_json_widget&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pumpwood_djangoviews&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Django apps</span>\n    <span class=\"s1\">&#39;django.contrib.admin&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.auth&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.contenttypes&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.sessions&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.messages&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.staticfiles&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django_extensions&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># MFA Admin</span>\n    <span class=\"s1\">&#39;rest_framework&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;knox&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Django Pumpwood Auth Models</span>\n    <span class=\"s1\">&#39;pumpwood_djangoauth&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pumpwood_djangoauth.i8n&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pumpwood_djangoauth.mfaadmin&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pumpwood_djangoauth.registration&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pumpwood_djangoauth.system&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pumpwood_djangoauth.metabase&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pumpwood_djangoauth.api_permission&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h4 id=\"logs-middleware\">Logs MIDDLEWARE</h4>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">MIDDLEWARE</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># CORS</span>\n    <span class=\"s1\">&#39;corsheaders.middleware.CorsMiddleware&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># BASIC</span>\n    <span class=\"s1\">&#39;django.middleware.security.SecurityMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.middleware.common.CommonMiddleware&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span>\n    <span class=\"s1\">&#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.messages.middleware.MessageMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Login must be last call...</span>\n    <span class=\"s1\">&#39;pumpwood_djangoauth.log.middleware.RequestLogMiddleware&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h4 id=\"config-rest_framework\">Config REST_FRAMEWORK</h4>\n\n<p>Ajust Knox configuration if necessary... but it is important to keep\n<code>knox.auth.TokenAuthentication</code> as <code>DEFAULT_AUTHENTICATION_CLASSES</code>,\n<code>rest_framework.permissions.IsAuthenticated</code> on <code>DEFAULT_PERMISSION_CLASSES</code>\nand <code>pumpwood_djangoviews.exception_handler.custom_exception_handler</code> as\n<code>EXCEPTION_HANDLER</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;DEFAULT_PERMISSION_CLASSES&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;rest_framework.permissions.IsAuthenticated&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;knox.auth.TokenAuthentication&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">&#39;EXCEPTION_HANDLER&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;pumpwood_djangoviews.exception_handler.custom_exception_handler&#39;</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h4 id=\"config-rest_knox\">Config REST_KNOX</h4>\n\n<p>Ajust Knox configuration if necessary...</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">REST_KNOX</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;SECURE_HASH_ALGORITHM&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;cryptography.hazmat.primitives.hashes.SHA512&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;AUTH_TOKEN_CHARACTER_LENGTH&#39;</span><span class=\"p\">:</span> <span class=\"mi\">64</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;TOKEN_TTL&#39;</span><span class=\"p\">:</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">),</span>\n    <span class=\"s1\">&#39;USER_SERIALIZER&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;knox.serializers.UserSerializer&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;TOKEN_LIMIT_PER_USER&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;AUTO_REFRESH&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;EXPIRY_DATETIME_FORMAT&#39;</span><span class=\"p\">:</span> <span class=\"n\">api_settings</span><span class=\"o\">.</span><span class=\"n\">DATETIME_FORMAT</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"register-end-points-on-kong\">Register end-points on Kong</h3>\n\n<p>To register models and other end-points on Kong it is possible to use\n<code>register_auth_kong_objects</code> helper function. For that it is necessary to\nset <code>get_wsgi_application()</code> to iniciate application models before importing\nviews.</p>\n\n<p>Usually <code>SERVICE_URL</code> and <code>AUTH_STATIC_SERVICE</code> are set as enviroment\nvariables. This might help when deploing application on K8s or docker-compose\nwhen both services might have different configuration.</p>\n\n<p>It might be interesting to set a enviroment variable (Ex. <code>CLOUD</code>)to set if\napplication should register end-points or not. This is usefull for local\ntests of application for unitesting and development.</p>\n\n<pre><code>from django.core.wsgi import get_wsgi_application\nfrom pumpwood_djangoauth.kong.create_routes import register_auth_kong_objects\nfrom pumpwood_djangoauth.config import MEDIA_URL\n\nis_cloud_deploy = os.environ.get(\"CLOUD\", \"FALSE\") == \"TRUE\"\nif is_cloud_deploy:\n    if \"core.wsgi\" in sys.argv:\n        print(\"#########################################\")\n        print(\"# Registering API end-points on kong... #\")\n        print(\"#########################################\")\n        get_wsgi_application()\n\n        from pumpwood_djangoauth.system.views import (\n            RestKongRoute, RestKongService)\n        from pumpwood_djangoauth.registration.views import RestUser\n        from pumpwood_djangoauth.metabase.views import (\n            RestMetabaseDashboard, RestMetabaseDashboardParameter)\n        from pumpwood_djangoauth.i8n.views import RestPumpwoodI8nTranslation\n        from pumpwood_djangoauth.api_permission.views import (\n            RestPumpwoodPermissionPolicy, RestPumpwoodPermissionPolicyAction,\n            RestPumpwoodPermissionGroup, RestPumpwoodPermissionUserGroupM2M,\n            RestPumpwoodPermissionPolicyGroupM2M,\n            RestPumpwoodPermissionPolicyUserM2M)\n\n        service_url = os.environ.get(\"SERVICE_URL\")\n        auth_static_service = os.environ.get(\"AUTH_STATIC_SERVICE\")\n\n        # Register rest end-points and admin\n        register_auth_kong_objects(\n            service_url=service_url,\n\n            # Set a name for service associated with routes of pumpwood-auth\n            service_name=\"pumpwood-auth-app\",\n\n            # Register a healthcheck route for aplication\n            healthcheck_route=\"/health-check/pumpwood-auth-app/\",\n\n            # Service description must be unique over all pumpwood services\n            service_description=\"Authentication Microservice\",\n\n            # Notes that will be avaiable when getting registered end-points\n            # on Pumpwood\n            service_notes=(\n                \"Microservice responsible for User's authentication and \"\n                \"general Pumpwood systems end-points.\"),\n\n            # Key/Value tags to help on organization of end-points\n            service_dimensions={\n                \"microservice\": \"pumpwood-auth-app\",\n                \"type\": \"core\",\n                \"function\": \"authentication\"},\n\n            # A icon (string associated with an icon) can be setted to help\n            # rendering of side bar by frontend.\n            service_icon=None,\n\n            # Some extra info can be saved among with service information,\n            # usually this information migth be usefull for programatic\n            # consumption of the service by frontend.\n            service_extra_info={},\n\n            # List routes that should be registered at Kong associated with\n            # this service. This is usefull for some routes are not associated\n            # with models such as login routes, MFA validation, etc...\n            routes=[{\n                # Url associated with the route\n                \"route_url\": \"/rest/registration/\",\n                # Name of the route, it must be unique over all Pumpwood\n                # system\n                \"route_name\": \"api--registration\",\n\n                # Type of the route, it must be in values `['endpoint',\n                # 'aux', 'gui', 'datavis', 'static', 'admin', 'media']`. For\n                # more information abount the options check\n                # `systems.KongRoute.route_type` attribute options.\n                \"route_type\": \"aux\",\n\n                # User readble description of the route, it must be unique\n                # over all pumpwood system.\n                \"description\": \"Registration\",\n\n                # A longer description for the end-point, this information\n                # will be avaiable to front-end at list registred end-point.\n                \"notes\": (\n                    \"End-point for login, logout and other Authentication \"\n                    \"functions\"),\n\n                # Key/Values tag that will help to better organization of the\n                # routes\n                \"dimensions\": {\n                    \"microservice\": \"pumpwood-auth-app\",\n                    \"service_type\": \"core\",\n                    \"function\": \"authentication\",\n                    \"endpoint\": \"registration\",\n                    \"route_type\": \"aux\"},\n\n                # A string that can be associated with an icon, this is passed\n                # to frontend and list registred end-point.\n                \"icon\": \"\",\n\n                # Dictionary that can be used to store information that can\n                # be consumed programatic.\n                \"extra_info\": {}\n            }, {\n                \"route_url\": \"/rest/pumpwood/\",\n                \"route_name\": \"api--pumpwood\",\n                \"route_type\": \"aux\",\n                \"description\": \"Pumpwood System\",\n                \"notes\": (\n                    \"System related end-points to list Kong routes, and \"\n                    \"dummy-calls\"),\n                \"dimensions\": {\n                    \"microservice\": \"pumpwood-auth-app\",\n                    \"service_type\": \"core\",\n                    \"function\": \"system\",\n                    \"endpoint\": \"pumpwood\",\n                    \"route_type\": \"aux\"},\n                \"icon\": \"\",\n                \"extra_info\": {}\n            }, {\n                #########\n                # Admin #\n                # It is possible to serve Pumpwood Admin adding a custom route\n                # to pumpwood auth service.\n                \"route_url\": \"/admin/pumpwood-auth-app/gui/\",\n                \"route_name\": \"admin--pumpwood-auth-app\",\n                \"route_type\": \"admin\",\n                \"description\": \"Pumpwood Auth Admin\",\n                \"notes\": (\n                    \"Admin for pumpwood-auth-app microservice.\"),\n                \"dimensions\": {\n                    \"microservice\": \"pumpwood-auth-app\",\n                    \"service_type\": \"core\",\n                    \"function\": \"gui\",\n                    \"route_type\": \"admin\"},\n                \"icon\": \"\",\n                \"extra_info\": {}\n            }, {\n                #############\n                # MEDIA_URL #\n                # Media URL can be added using a custom route to pumpwood-auth\n                # service.\n                \"route_url\": \"/\" + MEDIA_URL,\n                \"route_name\": \"media--pumpwood-auth-app\",\n                \"route_type\": \"media\",\n                \"description\": \"Pumpwood Auth Media Files\",\n                \"notes\": (\n                    \"Path to serve files using links.\"),\n                \"dimensions\": {\n                    \"microservice\": \"pumpwood-auth-app\",\n                    \"service_type\": \"core\",\n                    \"function\": \"media\"},\n                \"icon\": \"\",\n                \"extra_info\": {}\n            }, {\n                ##############\n                # Other APPs #\n                # Other APPs like jet, grappeli or custom admin flavors can\n                # be added as custom routes to associate end-points to\n                # pumpwood-auth-app services\n                \"route_url\": \"/jet/\",\n                \"route_name\": \"pumpwood-auth-app--jet\",\n                \"route_type\": \"gui\",\n                \"description\": \"End-point for Jet Package urls\",\n                \"notes\": (\n                    \"Serve Jet urls.\"),\n                \"dimensions\": {\n                    \"microservice\": \"pumpwood-auth-app\",\n                    \"service_type\": \"core\",\n                    \"function\": \"gui\"},\n                \"icon\": \"\",\n                \"extra_info\": {}\n            }],\n\n            # viewsets parameters can be used to register default pumpwood\n            # end-points for model_class. Fuction will extract information\n            # from view associationg them with routes at service, routes\n            # will be created with /rest/{model_class}/ as route.\n            viewsets=[\n                RestKongRoute, RestKongService, RestUser,\n                RestMetabaseDashboard, RestMetabaseDashboardParameter,\n                RestPumpwoodI8nTranslation, RestPumpwoodPermissionPolicy,\n                RestPumpwoodPermissionPolicyAction,\n                RestPumpwoodPermissionGroup,\n                RestPumpwoodPermissionUserGroupM2M,\n                RestPumpwoodPermissionPolicyGroupM2M,\n                RestPumpwoodPermissionPolicyUserM2M])\n\n        ######################\n        # Add other services #\n        # Some other microservice can be registred using pumpwood-auth,\n        # although they are not served directly by pumpwood-auth. This can\n        # help to register service and routes for microservice without\n        # the need of customizing the docker imagens.\n        # This is parciculary usefull to deploy static files NGINX end-point.\n        # It is possible to use NGINX to serve Django static files for\n        # production use and register the end-points using auth microservice.\n        register_auth_kong_objects(\n            service_url=auth_static_service,\n            service_name=\"static-files\",\n            healthcheck_route=None,\n            service_description=\"Static Files\",\n            service_notes=(\n                \"Static files\"),\n            service_dimensions={\n                \"microservice\": \"pumpwood\",\n                \"type\": \"static\"},\n            service_icon=None,\n            service_extra_info={},\n            routes=[{\n                # Admin static files\n                \"route_url\": \"/static/\",\n                \"route_name\": \"static\",\n                \"route_type\": \"static\",\n                \"description\": \"Static Files Routes\",\n                \"notes\": (\n                    \"Static files for all pumpwood\"),\n                \"dimensions\": {\n                    \"microservice\": \"pumpwood\",\n                    \"service_type\": \"core\",\n                    \"route_type\": \"static\"},\n                \"icon\": \"\",\n                \"extra_info\": {}\n            }])\n\n        swagger_service_url = os.environ.get(\"SWAGGER_SERVICE_URL\")\n        if metabase_secret_key is not None:\n            register_auth_kong_objects(\n                service_url=swagger_service_url,\n                service_name=\"swagger\",\n                healthcheck_route=None,\n                service_description=\"Swagger OpenAPI\",\n                service_notes=(\n                    \"Front-end interface to test Pumpwood APIs\"),\n                service_dimensions={\n                    \"microservice\": \"swagger\",\n                    \"type\": \"gui\",\n                    \"function\": \"testing\"},\n                service_icon=None,\n                service_extra_info={},\n                routes=[{\n                    # Admin static files\n                    \"route_url\": \"/swagger\",\n                    \"route_name\": \"swagger--app\",\n                    \"route_type\": \"gui\",\n                    \"strip_path\": False,\n                    \"description\": \"Swagger OpenAPI\",\n                    \"notes\": (\n                        \"Front-end interface to test Pumpwood APIs\"),\n                    \"dimensions\": {\n                        \"microservice\": \"swagger\",\n                        \"service_type\": \"gui\",\n                        \"route_type\": \"testing\"},\n                    \"icon\": \"\",\n                    \"extra_info\": {}\n                }])\n</code></pre>\n"}, {"fullname": "pumpwood_djangoauth.api_permission", "modulename": "pumpwood_djangoauth.api_permission", "kind": "module", "doc": "<h1 id=\"models-and-end-points-for-api_permission\">Models and end-points for api_permission.</h1>\n\n<p>Generate models and end-points that are used to set permission to access\nof Pumpwood end-points.</p>\n"}, {"fullname": "pumpwood_djangoauth.api_permission.models", "modulename": "pumpwood_djangoauth.api_permission.models", "kind": "module", "doc": "<p>Django models to set custom permission for Pumpwood end-points.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<p>End-points not functional yet.</p>\n\n</div>\n"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy", "kind": "class", "doc": "<p>Permission Policy to be applied at Pumpwood End-points.</p>\n\n<p>Permission policy is a set of diffent permission associated with and\nan end-point. Permission Policy can be associated with Users or Groups\nwith a priority parameter.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<p>End-points not functional yet.</p>\n\n</div>\n\n<h6 id=\"model-fields\">Model fields:</h6>\n\n<blockquote>\n  <ul>\n  <li><strong>description [TextField]:</strong>\n  Unique description for PumpwoodPermissionPolicy objects.</li>\n  <li><strong>notes [TextField]:</strong> Long descriptions for\n  PumpwoodPermissionPolicy objects.</li>\n  <li><strong>dimensions [JSONField]:</strong> Key/Value dictionary with\n  information to help organization/fetch of the data.</li>\n  <li><strong>route [ForeignKey('KongRoute')]:</strong> ForeignKey\n  to KongRoute model_class. It corresponds to the route at which\n  the permission policy will be applied.</li>\n  <li><strong>can_list [choices]:</strong> Permissions associated with list end-point\n  for this policy. Options as avaiable at <code>PERMISSION_CHOICES</code>.</li>\n  <li><strong>can_list_without_pag [choices]:</strong> Permissions associated with\n  list-without-pag end-point for this policy. Options as avaiable at\n  <code>PERMISSION_CHOICES</code>.</li>\n  <li><strong>can_retrieve [choices]:</strong> Permissions associated with\n  retrieve end-point for this policy. Options as avaiable at\n  <code>PERMISSION_CHOICES</code>.</li>\n  <li><strong>can_retrieve_file [choices]:</strong> Permissions associated with\n  retrieve file end-point for this policy. Options as avaiable at\n  <code>PERMISSION_CHOICES</code>.</li>\n  <li><strong>can_delete [choices]:</strong> Permissions associated with\n  delete end-point for this policy. Options as avaiable at\n  <code>PERMISSION_CHOICES</code>.</li>\n  <li><strong>can_delete_many [choices]:</strong> Permissions associated with\n  delete many end-point for this policy. Options as avaiable at\n  <code>PERMISSION_CHOICES</code>.</li>\n  <li><strong>can_delete_file [TextField]:</strong> Permissions associated with\n  delete file end-point for this policy. Options as avaiable at\n  <code>PERMISSION_CHOICES</code>.</li>\n  <li><strong>can_save [TextField]:</strong> Permissions associated with\n  save end-point for this policy. Options as avaiable at\n  <code>PERMISSION_CHOICES</code>.</li>\n  <li><strong>can_run_actions [TextField]:</strong> Permissions associated with\n  execute action end-point for this policy. Options as avaiable at\n  <code>ACTION_PERMISSION_CHOICES</code>. Custom action policy can be created\n  to fine grained policy permission associated with each action\n  using PumpwoodPermissionPolicyAction model class.</li>\n  <li><strong>extra_info [JSONField]:</strong> Dictionary with extra information\n  that might be usefull.</li>\n  <li><strong>updated_by [ForeignKey('User')]:</strong> Foreign Key to the user\n  repossible for updating the policy.</li>\n  <li><strong>updated_at [models.DateTimeField]:</strong> Date/time the policy was\n  created/updated.</li>\n  </ul>\n</blockquote>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.PERMISSION_CHOICES", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.PERMISSION_CHOICES", "kind": "variable", "doc": "<p>Permission choices that will restrict <code>can_list, can_list_without_pag,\ncan_retrieve, can_retrieve_file, can_delete, can_delete_many,\ncan_delete_file, can_save, can_run_actions</code> attributes.</p>\n", "default_value": "[(&#x27;allow&#x27;, &#x27;Allow&#x27;), (&#x27;deny&#x27;, &#x27;Deny&#x27;), (&#x27;no_change&#x27;, &#x27;No change&#x27;)]"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.ACTION_PERMISSION_CHOICES", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.ACTION_PERMISSION_CHOICES", "kind": "variable", "doc": "<p>Action Permission choices that will restrict <code>can_run_actions</code>\nattribute.</p>\n", "default_value": "[(&#x27;allow&#x27;, &#x27;Allow&#x27;), (&#x27;deny&#x27;, &#x27;Deny&#x27;), (&#x27;custom&#x27;, &#x27;Custom&#x27;), (&#x27;no_change&#x27;, &#x27;No change&#x27;)]"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.list_user_permissions", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.list_user_permissions", "kind": "function", "doc": "<p>List all permissions associated with an user.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<p>Function not implemented yet.</p>\n\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>user_pk [int]:</strong>  User pk tho whom list all avaiable\npermissions.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodNotImplementedError:</strong>  Function is not implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.DoesNotExist", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_can_list_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_can_list_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_can_list_without_pag_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_can_list_without_pag_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_can_retrieve_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_can_retrieve_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_can_retrieve_file_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_can_retrieve_file_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_can_delete_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_can_delete_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_can_delete_many_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_can_delete_many_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_can_delete_file_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_can_delete_file_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_can_save_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_can_save_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_can_run_actions_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_can_run_actions_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_next_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_next_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.get_previous_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.get_previous_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.id", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.action_set", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.action_set", "kind": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.policy_group_set", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.policy_group_set", "kind": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy.policy_user_set", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicy.policy_user_set", "kind": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyAction", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyAction", "kind": "class", "doc": "<p>Permission Policies to customize action access.</p>\n\n<p>Custom action permission can allow/deny specific actions associated with\na model class.</p>\n\n<h6 id=\"model-fields\">Model fields:</h6>\n\n<blockquote>\n  <ul>\n  <li><strong>policy [ForeignKey('PumpwoodPermissionPolicy')]:</strong> Foreign\n  key associated with <code>PumpwoodPermissionPolicy</code>. It will\n  create fine grained permission policy associated with custom\n  policy for action execution.</li>\n  <li><strong>action [CharField]:</strong> Name of the action over which policy will\n  be applied.</li>\n  <li><strong>permission [choices]:</strong> Choices associated with policy. Choices\n  limited to <code>PERMISSION_CHOICES</code> options.</li>\n  <li><strong>extra_info [JSONField]:</strong> Exta information that might be usefull.</li>\n  <li><strong>updated_by [ForeignKey('User')]:</strong> User associated with\n  creation/update of the action custom policy.</li>\n  <li><strong>updated_at [DateTimeField]:</strong> Date/time associated with creation/\n  update of the policy.</li>\n  </ul>\n</blockquote>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyAction.PERMISSION_CHOICES", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyAction.PERMISSION_CHOICES", "kind": "variable", "doc": "<p>Choices associated with custom action policy.</p>\n", "default_value": "[(&#x27;allow&#x27;, &#x27;Allow&#x27;), (&#x27;deny&#x27;, &#x27;Deny&#x27;)]"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyAction.DoesNotExist", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyAction.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyAction.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyAction.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyAction.get_permission_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyAction.get_permission_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyAction.get_next_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyAction.get_next_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyAction.get_previous_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyAction.get_previous_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyAction.id", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyAction.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionGroup", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionGroup", "kind": "class", "doc": "<p>Permission group for Pumpwood End-Points.</p>\n\n<p>Create permission groups associating many users in a group to apply\nPermissionPolicy collectivity.</p>\n\n<h6 id=\"model-fields\">Model fields:</h6>\n\n<blockquote>\n  <ul>\n  <li><strong>description [TextField]:</strong> Description of the permission group.</li>\n  <li><strong>notes [TextField]:</strong> Long notes associated with permission group.</li>\n  <li><strong>dimensions [JSONField]:</strong> Key/Value tags for organization of\n  permission groups on database.</li>\n  <li><strong>extra_info [JSONField]:</strong> Extra information that can be helpfull\n  on the future.</li>\n  <li><strong>updated_by [ForeignKey('User')]:</strong> Foreign key associated with\n  User model class of the user resposible for creation and update.</li>\n  <li><strong>updated_at [DateTimeField]:</strong> Date/Time when the permission\n  group was updated.</li>\n  </ul>\n</blockquote>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionGroup.DoesNotExist", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionGroup.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionGroup.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionGroup.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionGroup.get_next_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionGroup.get_next_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionGroup.get_previous_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionGroup.get_previous_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionGroup.id", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionGroup.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionGroup.group_user_set", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionGroup.group_user_set", "kind": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionGroup.permission_set", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionGroup.permission_set", "kind": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionUserGroupM2M", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionUserGroupM2M", "kind": "class", "doc": "<p>Permission group user association.</p>\n\n<p>M2M model class to associate users with groups.</p>\n\n<h6 id=\"model-fields\">Model fields:</h6>\n\n<blockquote>\n  <ul>\n  <li><strong>user [ForeignKey('User')]:</strong>\n  Foreign Key from User model class to associate with\n  PumpwoodPermissionGroup.</li>\n  <li><strong>group [ForeignKey('PumpwoodPermissionGroup')]:</strong>\n  Foreign Key from PumpwoodPermissionGroup model class.</li>\n  <li><strong>extra_info [JSONField]:</strong>\n  Extra information associated with relation between User and\n  PumpwoodPermissionGroup.</li>\n  <li><strong>updated_by [ForeignKey]:</strong> Foreign Key associated with user\n  repossible for updating and creating relation between User and\n  PumpwoodPermissionGroup.</li>\n  <li><strong>updated_at [DateTimeField]:</strong> Date/time the relation between User\n  and PumpwoodPermissionGroup was created or updated.</li>\n  </ul>\n</blockquote>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionUserGroupM2M.DoesNotExist", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionUserGroupM2M.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionUserGroupM2M.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionUserGroupM2M.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionUserGroupM2M.get_next_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionUserGroupM2M.get_next_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionUserGroupM2M.get_previous_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionUserGroupM2M.get_previous_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionUserGroupM2M.id", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionUserGroupM2M.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyGroupM2M", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyGroupM2M", "kind": "class", "doc": "<p>Link PermissionPolicy and PumpwoodPermissionGroup.</p>\n\n<p>Associate permission policies with groups to apply it to all users\nthat belongs to the group.</p>\n\n<h6 id=\"model-fields\">Model fields:</h6>\n\n<blockquote>\n  <ul>\n  <li><strong>priority [IntegerField]:</strong> Integer setting priority to permission\n  policy. Lower numbers with have priority.</li>\n  <li><strong>group [ForeignKey('PumpwoodPermissionGroup')]:</strong> Foreign Key to\n  associated policy with group.</li>\n  <li><strong>general_policy [TextField]:</strong> General policy associate with group,\n  it will affect all Pumpwood end-points.</li>\n  <li><strong>custom_policy [ForeignKey]:</strong> Foreign Key to associate a\n  PumpwoodPermissionPolicy to a PumpwoodPermissionGroup.</li>\n  <li><strong>extra_info [JSONField]:</strong> Extra information that might be\n  important.</li>\n  <li><strong>updated_by [ForeignKey]:</strong> User that created/updated the relation\n  between PumpwoodPermissionGroup and policies</li>\n  <li><strong>updated_at [DateTimeField]:</strong> Date/time the relation was created/\n  updated.</li>\n  </ul>\n</blockquote>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyGroupM2M.PERMISSION_CHOICES", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyGroupM2M.PERMISSION_CHOICES", "kind": "variable", "doc": "<p>Choices for general permission that are associated with all pumpwood\nend-points.</p>\n", "default_value": "[(&#x27;read&#x27;, &#x27;Read&#x27;), (&#x27;write&#x27;, &#x27;Write&#x27;), (&#x27;custom&#x27;, &#x27;Custom&#x27;)]"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyGroupM2M.DoesNotExist", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyGroupM2M.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyGroupM2M.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyGroupM2M.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyGroupM2M.get_general_policy_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyGroupM2M.get_general_policy_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyGroupM2M.get_next_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyGroupM2M.get_next_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyGroupM2M.get_previous_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyGroupM2M.get_previous_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyGroupM2M.id", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyGroupM2M.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyUserM2M", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyUserM2M", "kind": "class", "doc": "<p>Link PermissionPolicy and User.</p>\n\n<p>Associate permission policies with users individualy.</p>\n\n<h6 id=\"model-class\">Model class:</h6>\n\n<blockquote>\n  <ul>\n  <li><strong>priority [IntegerField]:</strong> Integer setting priority to permission\n  policy. Lower numbers with have priority.</li>\n  <li><strong>user [ForeignKey('user')]:</strong> Foreign Key to\n  associated policy with user.</li>\n  <li><strong>general_policy [TextField]:</strong> General policy associate with group,\n  it will affect all Pumpwood end-points.</li>\n  <li><strong>custom_policy [ForeignKey]:</strong> Foreign Key to associate a\n  PumpwoodPermissionPolicy to a PumpwoodPermissionGroup.</li>\n  <li><strong>extra_info [JSONField]:</strong> Extra information that might be\n  important.</li>\n  <li><strong>updated_by [ForeignKey]:</strong> User that created/updated the relation\n  between PumpwoodPermissionGroup and policies</li>\n  <li><strong>updated_at [DateTimeField]:</strong> Date/time the relation was created/\n  updated.</li>\n  </ul>\n</blockquote>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyUserM2M.PERMISSION_CHOICES", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyUserM2M.PERMISSION_CHOICES", "kind": "variable", "doc": "<p>Choices for general permission that are associated with all pumpwood\nend-points.</p>\n", "default_value": "[(&#x27;read&#x27;, &#x27;Read&#x27;), (&#x27;write&#x27;, &#x27;Write&#x27;), (&#x27;custom&#x27;, &#x27;Custom&#x27;)]"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyUserM2M.DoesNotExist", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyUserM2M.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyUserM2M.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyUserM2M.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyUserM2M.get_general_policy_display", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyUserM2M.get_general_policy_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyUserM2M.get_next_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyUserM2M.get_next_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyUserM2M.get_previous_by_updated_at", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyUserM2M.get_previous_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyUserM2M.id", "modulename": "pumpwood_djangoauth.api_permission.models", "qualname": "PumpwoodPermissionPolicyUserM2M.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.urls", "modulename": "pumpwood_djangoauth.api_permission.urls", "kind": "module", "doc": "<p>Create URLs for api_permission models.</p>\n"}, {"fullname": "pumpwood_djangoauth.api_permission.views", "modulename": "pumpwood_djangoauth.api_permission.views", "kind": "module", "doc": "<p>Views for authentication and user end-point.</p>\n"}, {"fullname": "pumpwood_djangoauth.api_permission.views.view__list_self_permissions", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "view__list_self_permissions", "kind": "function", "doc": "<p>Get kong routes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.views.view__has_permission", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "view__has_permission", "kind": "function", "doc": "<p>Get kong routes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy", "kind": "class", "doc": "<p>End-point with Api Policies definition.</p>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy.endpoint_description", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;PumpwoodPermissionPolicy&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy.dimensions", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy.dimensions", "kind": "variable", "doc": "<p>Dimensions associated with end-points. This information will be saved\nat KongRoute dimensions.</p>\n", "annotation": ": dict", "default_value": "{&#x27;microservice&#x27;: &#x27;pumpwood-auth-app&#x27;, &#x27;service_type&#x27;: &#x27;core&#x27;, &#x27;service&#x27;: &#x27;auth&#x27;, &#x27;type&#x27;: &#x27;permission&#x27;}"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy.icon", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy.icon", "kind": "variable", "doc": "<p>Icon associated with model class. This information will be saved\nat KongRoute icon field.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy.service_model", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicy&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy.serializer", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.serializers.SerializerPumpwoodPermissionPolicy&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy.storage_object", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy.storage_object", "kind": "variable", "doc": "<p>PumpwoodStorage object that will be used to save and retrieve\nfile data from storage.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy.microservice", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object used to communicate with other\nmicroservice if necessary. Ex: Trigger ETL Jobs on object\nsaving and update.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;description&#x27;, &#x27;notes&#x27;, &#x27;dimensions&#x27;, &#x27;route_id&#x27;, &#x27;can_retrieve&#x27;, &#x27;can_retrieve_file&#x27;, &#x27;can_delete&#x27;, &#x27;can_delete_many&#x27;, &#x27;can_delete_file&#x27;, &#x27;can_save&#x27;, &#x27;can_run_actions&#x27;, &#x27;updated_by_id&#x27;, &#x27;updated_at&#x27;]}, {&#x27;name&#x27;: &#x27;extra-info&#x27;, &#x27;fields&#x27;: [&#x27;extra_info&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy.gui_readonly", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;extra_info&#x27;]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicy.gui_verbose_field", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicy.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk} | {description}&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction", "kind": "class", "doc": "<p>Define custom action policies associated with a policy.</p>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction.endpoint_description", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;PumpwoodPermissionPolicyAction&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction.dimensions", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction.dimensions", "kind": "variable", "doc": "<p>Dimensions associated with end-points. This information will be saved\nat KongRoute dimensions.</p>\n", "annotation": ": dict", "default_value": "{&#x27;microservice&#x27;: &#x27;pumpwood-auth-app&#x27;, &#x27;service_type&#x27;: &#x27;core&#x27;, &#x27;service&#x27;: &#x27;auth&#x27;, &#x27;type&#x27;: &#x27;permission&#x27;}"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction.icon", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction.icon", "kind": "variable", "doc": "<p>Icon associated with model class. This information will be saved\nat KongRoute icon field.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction.service_model", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyAction&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction.serializer", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.serializers.SerializerPumpwoodPermissionPolicyAction&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction.storage_object", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction.storage_object", "kind": "variable", "doc": "<p>PumpwoodStorage object that will be used to save and retrieve\nfile data from storage.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction.microservice", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object used to communicate with other\nmicroservice if necessary. Ex: Trigger ETL Jobs on object\nsaving and update.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;pk&#x27;, &#x27;model_class&#x27;, &#x27;policy_id&#x27;, &#x27;action&#x27;, &#x27;permission&#x27;, &#x27;extra_info&#x27;, &#x27;updated_by_id&#x27;, &#x27;updated_at&#x27;]}, {&#x27;name&#x27;: &#x27;extra-info&#x27;, &#x27;fields&#x27;: [&#x27;extra_info&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction.gui_readonly", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyAction.gui_verbose_field", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyAction.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk} | {policy_id} {action}&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup", "kind": "class", "doc": "<p>Groups to apply Policies for many users at same time.</p>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup.endpoint_description", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;SerializerPumpwoodPermissionGroups&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup.dimensions", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup.dimensions", "kind": "variable", "doc": "<p>Dimensions associated with end-points. This information will be saved\nat KongRoute dimensions.</p>\n", "annotation": ": dict", "default_value": "{&#x27;microservice&#x27;: &#x27;pumpwood-auth-app&#x27;, &#x27;service_type&#x27;: &#x27;core&#x27;, &#x27;service&#x27;: &#x27;auth&#x27;, &#x27;type&#x27;: &#x27;permission&#x27;}"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup.icon", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup.icon", "kind": "variable", "doc": "<p>Icon associated with model class. This information will be saved\nat KongRoute icon field.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup.service_model", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.models.PumpwoodPermissionGroup&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup.serializer", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.serializers.SerializerPumpwoodPermissionGroup&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup.storage_object", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup.storage_object", "kind": "variable", "doc": "<p>PumpwoodStorage object that will be used to save and retrieve\nfile data from storage.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup.microservice", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object used to communicate with other\nmicroservice if necessary. Ex: Trigger ETL Jobs on object\nsaving and update.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;pk&#x27;, &#x27;model_class&#x27;, &#x27;description&#x27;, &#x27;notes&#x27;, &#x27;dimensions&#x27;, &#x27;updated_by_id&#x27;, &#x27;updated_at&#x27;]}, {&#x27;name&#x27;: &#x27;extra-info&#x27;, &#x27;fields&#x27;: [&#x27;extra_info&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup.gui_readonly", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;extra_info&#x27;]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionGroup.gui_verbose_field", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionGroup.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk} | {description}&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M", "kind": "class", "doc": "<p>Include users to policy groups.</p>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M.endpoint_description", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;PumpwoodPermissionUserGroupM2M&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M.dimensions", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M.dimensions", "kind": "variable", "doc": "<p>Dimensions associated with end-points. This information will be saved\nat KongRoute dimensions.</p>\n", "annotation": ": dict", "default_value": "{&#x27;microservice&#x27;: &#x27;pumpwood-auth-app&#x27;, &#x27;service_type&#x27;: &#x27;core&#x27;, &#x27;service&#x27;: &#x27;auth&#x27;, &#x27;type&#x27;: &#x27;permission&#x27;}"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M.icon", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M.icon", "kind": "variable", "doc": "<p>Icon associated with model class. This information will be saved\nat KongRoute icon field.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M.service_model", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.models.PumpwoodPermissionUserGroupM2M&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M.serializer", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.serializers.SerializerPumpwoodPermissionUserGroupM2M&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M.storage_object", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M.storage_object", "kind": "variable", "doc": "<p>PumpwoodStorage object that will be used to save and retrieve\nfile data from storage.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M.microservice", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object used to communicate with other\nmicroservice if necessary. Ex: Trigger ETL Jobs on object\nsaving and update.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;pk&#x27;, &#x27;model_class&#x27;, &#x27;user_id&#x27;, &#x27;group_id&#x27;, &#x27;extra_info&#x27;, &#x27;updated_by_id&#x27;, &#x27;updated_at&#x27;]}, {&#x27;name&#x27;: &#x27;extra-info&#x27;, &#x27;fields&#x27;: [&#x27;extra_info&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M.gui_readonly", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;extra_info&#x27;]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionUserGroupM2M.gui_verbose_field", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionUserGroupM2M.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk} | {description}&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M", "kind": "class", "doc": "<p>End-point with information about Pumpwood users.</p>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M.endpoint_description", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;PumpwoodPermissionPolicyGroupM2M&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M.dimensions", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M.dimensions", "kind": "variable", "doc": "<p>Dimensions associated with end-points. This information will be saved\nat KongRoute dimensions.</p>\n", "annotation": ": dict", "default_value": "{&#x27;microservice&#x27;: &#x27;pumpwood-auth-app&#x27;, &#x27;service_type&#x27;: &#x27;core&#x27;, &#x27;service&#x27;: &#x27;auth&#x27;, &#x27;type&#x27;: &#x27;permission&#x27;}"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M.icon", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M.icon", "kind": "variable", "doc": "<p>Icon associated with model class. This information will be saved\nat KongRoute icon field.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M.service_model", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyGroupM2M&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M.serializer", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.serializers.SerializerPumpwoodPermissionPolicyGroupM2M&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M.storage_object", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M.storage_object", "kind": "variable", "doc": "<p>PumpwoodStorage object that will be used to save and retrieve\nfile data from storage.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M.microservice", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object used to communicate with other\nmicroservice if necessary. Ex: Trigger ETL Jobs on object\nsaving and update.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;pk&#x27;, &#x27;model_class&#x27;, &#x27;priority&#x27;, &#x27;group_id&#x27;, &#x27;general_policy&#x27;, &#x27;custom_policy_id&#x27;, &#x27;extra_info&#x27;, &#x27;updated_by_id&#x27;, &#x27;updated_at&#x27;]}, {&#x27;name&#x27;: &#x27;extra-info&#x27;, &#x27;fields&#x27;: [&#x27;extra_info&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M.gui_readonly", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;extra_info&#x27;]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyGroupM2M.gui_verbose_field", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyGroupM2M.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk}}&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M", "kind": "class", "doc": "<p>End-point with information about Pumpwood users.</p>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M.endpoint_description", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;PumpwoodPermissionPolicyUserM2M&#x27;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M.dimensions", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M.dimensions", "kind": "variable", "doc": "<p>Dimensions associated with end-points. This information will be saved\nat KongRoute dimensions.</p>\n", "annotation": ": dict", "default_value": "{&#x27;microservice&#x27;: &#x27;pumpwood-auth-app&#x27;, &#x27;service_type&#x27;: &#x27;core&#x27;, &#x27;service&#x27;: &#x27;auth&#x27;, &#x27;type&#x27;: &#x27;permission&#x27;}"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M.icon", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M.icon", "kind": "variable", "doc": "<p>Icon associated with model class. This information will be saved\nat KongRoute icon field.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M.service_model", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.models.PumpwoodPermissionPolicyUserM2M&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M.serializer", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.api_permission.serializers.SerializerPumpwoodPermissionPolicyUserM2M&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M.storage_object", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M.storage_object", "kind": "variable", "doc": "<p>PumpwoodStorage object that will be used to save and retrieve\nfile data from storage.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M.microservice", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object used to communicate with other\nmicroservice if necessary. Ex: Trigger ETL Jobs on object\nsaving and update.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;priority&#x27;, &#x27;user_id&#x27;, &#x27;general_policy&#x27;, &#x27;custom_policy_id&#x27;, &#x27;extra_info&#x27;, &#x27;updated_by_id&#x27;, &#x27;updated_at&#x27;]}, {&#x27;name&#x27;: &#x27;extra-info&#x27;, &#x27;fields&#x27;: [&#x27;extra_info&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M.gui_readonly", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;extra_info&#x27;]"}, {"fullname": "pumpwood_djangoauth.api_permission.views.RestPumpwoodPermissionPolicyUserM2M.gui_verbose_field", "modulename": "pumpwood_djangoauth.api_permission.views", "qualname": "RestPumpwoodPermissionPolicyUserM2M.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk}}&#x27;"}, {"fullname": "pumpwood_djangoauth.config", "modulename": "pumpwood_djangoauth.config", "kind": "module", "doc": "<p>Define configurations for Pumpwood systems and iniciate singletons objects.</p>\n\n<p>It is used to centralize criation and inicialization of Pumpwood systens\nsingletons. These object are setted using enviroment variables and\ncan be imported at the through the application.</p>\n\n<p>Example of usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pumpwood_djangoviews.views</span> <span class=\"kn\">import</span> <span class=\"n\">PumpWoodRestService</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pumpwood_djangoauth.config</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">storage_object</span><span class=\"p\">,</span> <span class=\"n\">microservice</span><span class=\"p\">,</span> <span class=\"n\">rabbitmq_api</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">NiceEndPoint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">NiceEndPointSerializer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RestNicePumpwoodEndPoint</span><span class=\"p\">(</span><span class=\"n\">PumpWoodRestService</span><span class=\"p\">):</span>\n    <span class=\"n\">endpoint_description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Nice End-point&quot;</span>\n    <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;This is a super nice pumpwood end-point&quot;</span>\n\n    <span class=\"n\">service_model</span> <span class=\"o\">=</span> <span class=\"n\">NiceEndPoint</span>\n    <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">NiceEndPointSerializer</span>\n\n    <span class=\"c1\"># Uses singletons storage_object and microservice that</span>\n    <span class=\"c1\"># were iniciated using enviroment variables</span>\n    <span class=\"n\">storage_object</span> <span class=\"o\">=</span> <span class=\"n\">storage_object</span>\n    <span class=\"n\">microservice</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span>\n</code></pre>\n</div>\n"}, {"fullname": "pumpwood_djangoauth.config.kong_api", "modulename": "pumpwood_djangoauth.config", "qualname": "kong_api", "kind": "variable", "doc": "<p>Singleton used by Pumpwood Auth to register services and routes at Kong Api\nservice mesh. It will be used enviroment variable <code>API_GATEWAY_URL</code> to\ninitialize this object.</p>\n", "annotation": ": pumpwood_kong.kong_api.KongAPI", "default_value": "&lt;pumpwood_kong.kong_api.KongAPI object&gt;"}, {"fullname": "pumpwood_djangoauth.config.microservice", "modulename": "pumpwood_djangoauth.config", "qualname": "microservice", "kind": "variable", "doc": "<p>Singleton used by Pumpwood Auth to request call other microservices. It will\nbe used <code>MICROSERVICE_NAME</code>, <code>MICROSERVICE_URL</code>, <code>MICROSERVICE_USERNAME</code>\nand <code>MICROSERVICE_PASSWORD</code> enviroment variable to initialize this object.</p>\n\n<p>It is possible to use microservice to call pumpwood auth information, <strong>just\nbe carefull with recursive calls that will break the backend</strong>.</p>\n\n<p><strong>It is not recomended to use recursive calls at system startup</strong>, this migth\nmake system unavaiable (None replica will be avaiable to repond recursive\ncall.).</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.config.microservice_no_login", "modulename": "pumpwood_djangoauth.config", "qualname": "microservice_no_login", "kind": "variable", "doc": "<p>Singleton used by Pumpwood Auth to request call other microservices. This\nobject will not be logged using <code>MICROSERVICE_USERNAME</code> and\n<code>MICROSERVICE_PASSWORD</code> enviroment variables. It can be used to impersonate\nuser when requesting other microservices.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.config.storage_object", "modulename": "pumpwood_djangoauth.config", "qualname": "storage_object", "kind": "variable", "doc": "<p>Singleton used to comunicate with flat storage. It is used\n<code>STORAGE_TYPE</code>, <code>STORAGE_BUCKET_NAME</code>, <code>STORAGE_BASE_PATH</code> for this\nobject inicialization.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.config.rabbitmq_api", "modulename": "pumpwood_djangoauth.config", "qualname": "rabbitmq_api", "kind": "variable", "doc": "<p>Singleton used to comunicate with RabbitMQ. It is used\n<code>RABBITMQ_USERNAME</code>, <code>RABBITMQ_PASSWORD</code>, <code>RABBITMQ_HOST</code> and <code>RABBITMQ_PORT</code>\nfor this object inicialization.</p>\n", "annotation": ": pumpwood_miscellaneous.rabbitmq.PumpWoodRabbitMQ", "default_value": "&lt;PumpWoodRabbitMQ: queue=None&gt;"}, {"fullname": "pumpwood_djangoauth.config.PUMPWOOD_AUTH_IS_RABBITMQ_LOG", "modulename": "pumpwood_djangoauth.config", "qualname": "PUMPWOOD_AUTH_IS_RABBITMQ_LOG", "kind": "variable", "doc": "<p>Will set if logs should be dumped to RabbitMQ or printed to stdout.</p>\n", "annotation": ": str", "default_value": "True"}, {"fullname": "pumpwood_djangoauth.config.pumpwood_i8n", "modulename": "pumpwood_djangoauth.config", "qualname": "pumpwood_i8n", "kind": "variable", "doc": "<p>Singleton imported from <code>pumpwood_i8n.singletons</code>, it is used to translate\nsentences using Pumpwood I8s end-points.</p>\n", "annotation": ": pumpwood_i8n.translate.PumpwoodI8n", "default_value": "&lt;pumpwood_i8n.translate.PumpwoodI8n object&gt;"}, {"fullname": "pumpwood_djangoauth.config.MEDIA_URL", "modulename": "pumpwood_djangoauth.config", "qualname": "MEDIA_URL", "kind": "variable", "doc": "<p>Media base URL it can be used to create routes on Kong and make media\nend-points avaiable at app URLs. Default value can be changed using\nenviroment variable <code>MEDIA_URL</code></p>\n", "annotation": ": str", "default_value": "&#x27;media/&#x27;"}, {"fullname": "pumpwood_djangoauth.error_handling", "modulename": "pumpwood_djangoauth.error_handling", "kind": "module", "doc": "<p>Define custom exception handlers for Pumpwood systems.</p>\n\n<p>Custom erros can be used to correctly treat Pumpwood Exceptions and return\nthe treated erro as a JSON with not 2XX status code.</p>\n\n<p><code>custom_exception_handler</code> can be used at REST_FRAMEWORK MiddleWare at Django.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;DEFAULT_PERMISSION_CLASSES&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;rest_framework.permissions.IsAuthenticated&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;knox.auth.TokenAuthentication&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">&#39;EXCEPTION_HANDLER&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"c1\"># Add custom handler for API Calls</span>\n        <span class=\"s1\">&#39;pumpwood_djangoviews.exception_handler.custom_exception_handler&#39;</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n"}, {"fullname": "pumpwood_djangoauth.error_handling.custom_exception_handler", "modulename": "pumpwood_djangoauth.error_handling", "qualname": "custom_exception_handler", "kind": "function", "doc": "<p>Treat custom exception handler to PumpWoodExceptions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>exc [Exception]:</strong>  Exception raised processing request.</li>\n<li><strong>context:</strong>  Context of the error that was raised.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a response with error code depending of the PumpWoodException\n  raised. It returns a serialized dictionary with exception data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exc</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rest_framework</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n", "modulename": "pumpwood_djangoauth.i8n", "kind": "module", "doc": "<h1 id=\"implementation-of-translation-of-pumpwood-end-points\">Implementation of translation of Pumpwood end-points</h1>\n\n<p>Implements models and end-points to be used translating Pumpwood string.</p>\n"}, {"fullname": "pumpwood_djangoauth.i8n.admin", "modulename": "pumpwood_djangoauth.i8n.admin", "kind": "module", "doc": "<p>Register I8n translations.</p>\n"}, {"fullname": "pumpwood_djangoauth.i8n.admin.PumpwoodI8nTranslationAdmin", "modulename": "pumpwood_djangoauth.i8n.admin", "qualname": "PumpwoodI8nTranslationAdmin", "kind": "class", "doc": "<p>Encapsulate all admin options and functionality for a given model.</p>\n", "bases": "django.contrib.admin.options.ModelAdmin"}, {"fullname": "pumpwood_djangoauth.i8n.models", "modulename": "pumpwood_djangoauth.i8n.models", "kind": "module", "doc": "<p>Manage Kong routes for Pumpwood.</p>\n"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation", "kind": "class", "doc": "<p>Model to perform I8n on Pumpwood.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.sentence", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.sentence", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.tag", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.tag", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.plural", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.plural", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.language", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.language", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.user_type", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.user_type", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.translation", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.translation", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.do_not_remove", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.do_not_remove", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.last_used_at", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.last_used_at", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.translate", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.translate", "kind": "function", "doc": "<p>Fetch sentence translation from database.</p>\n\n<p>Use sentence/tag/plural/language/user_type to locate a corresponding\ntranslation to the sentence. If not present on table a new entry\nwill be generated.</p>\n\n<p>Args\n    sentence [str]: Sentence to be translated.</p>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>tag [str]: Tag used to differenciate same sentence, but with\n      different contexts leading to different translations.\n  plural [bool]: If sentence should be translated to plural,\n      sentences without plural differences can be set as False as\n      default.\n  language [str]: Language to which translate the sentence. If\n      not necessary multi language it can be set as empty string\n      ''.\n  user_type [str]: It is possible to have different translation\n      depending of the user type. If not necessary can be set\n      as empty string.</p>\n</blockquote>\n\n<p>Return [str | None]:\n    Return the translated string. If no translation found, return\n    same sentence.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">sentence</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">plural</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">user_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.DoesNotExist", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.get_next_by_last_used_at", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.get_next_by_last_used_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.get_previous_by_last_used_at", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.get_previous_by_last_used_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation.id", "modulename": "pumpwood_djangoauth.i8n.models", "qualname": "PumpwoodI8nTranslation.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.serializers", "modulename": "pumpwood_djangoauth.i8n.serializers", "kind": "module", "doc": "<p>Create Serializers.</p>\n"}, {"fullname": "pumpwood_djangoauth.i8n.serializers.PumpwoodI8nTranslationSerializer", "modulename": "pumpwood_djangoauth.i8n.serializers", "qualname": "PumpwoodI8nTranslationSerializer", "kind": "class", "doc": "<p>A ModelSerializer that change fields returned on serialization.</p>\n\n<p>This serializer make possible to change the serialization fields acording\nto arguments that are passed on serializer instanciation.</p>\n\n<h4 id=\"default-list-fields\">Default list fields</h4>\n\n<p>Attribute <code>list_fields</code> set the default fields that will be returned\nif <code>default_fields=True</code> argument is set.</p>\n\n<h4 id=\"usage-with-foreign-key\">Usage with foreign key</h4>\n\n<p>Foreign keys can be returned both for many=True and also many=False\nserializations passing <code>foreign_key_fields=True</code> argument.</p>\n\n<h4 id=\"usage-with-related-objects\">Usage with related objects</h4>\n\n<p>Serialization of many objects will not return related models serializers (\nMicroserviceRelatedField, LocalRelatedField). This behaviour will overide\nrelated_fields argumment, even if set as related_fields=True.</p>\n\n<p>Related Models serizalization is an expensive request at backend, should\nbe used only for <code>many=False</code> serialization (one object).</p>\n\n<h4 id=\"usage-with-fields-argument\">Usage with fields argument</h4>\n\n<p>All fields set on fields argument will be returned dispite beeing\nforeign key or related and arguments <code>related_fields=False</code>,\n<code>foreign_key_fields=False</code>.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">serializers</span> <span class=\"kn\">import</span> <span class=\"n\">SerializerCompany</span>\n\n\n<span class=\"c1\"># Defining serializer for User object</span>\n<span class=\"k\">class</span> <span class=\"nc\">SerializerUser</span><span class=\"p\">(</span><span class=\"n\">DynamicFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">model_class</span> <span class=\"o\">=</span> <span class=\"n\">ClassNameField</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># ForeignKey</span>\n    <span class=\"n\">api_permission_set</span> <span class=\"o\">=</span> <span class=\"n\">LocalRelatedField</span><span class=\"p\">(</span>\n        <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;pumpwood_djangoauth.api_permission.&quot;</span>\n            <span class=\"s2\">&quot;serializers.SerializerPumpwoodPermissionPolicyUserM2M&quot;</span><span class=\"p\">),</span>\n        <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;-id&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">api_permission_group_set</span> <span class=\"o\">=</span> <span class=\"n\">LocalRelatedField</span><span class=\"p\">(</span>\n        <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;pumpwood_djangoauth.api_permission.&quot;</span>\n            <span class=\"s2\">&quot;serializers.SerializerPumpwoodPermissionUserGroupM2M&quot;</span><span class=\"p\">),</span>\n        <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;-id&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">company</span> <span class=\"o\">=</span> <span class=\"n\">LocalRelatedField</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">SerializerCompany</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;model_class&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;email&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;first_name&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;last_name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;last_login&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;date_joined&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is_active&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;is_staff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is_superuser&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mfa_method_set&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;api_permission_set&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;api_permission_group_set&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;company&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">list_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;model_class&quot;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is_active&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is_superuser&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;is_staff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;email&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;last_login&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">read_only</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;last_login&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;date_joined&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Query for User objects</span>\n<span class=\"n\">all_users</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a serializer that will return just [&#39;pk&#39;, &#39;username&#39;]</span>\n<span class=\"c1\"># fields when dumping the objects.</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;description&#39;</span><span class=\"p\">],</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Return all fields except for foreign key and related models.</span>\n<span class=\"c1\"># [&#39;pk&#39;, &#39;model_class&#39;, &#39;username&#39;, &#39;email&#39;, &#39;first_name&#39;,</span>\n<span class=\"c1\">#  &#39;last_name&#39;, &#39;last_login&#39;, &#39;date_joined&#39;, &#39;is_active&#39;,</span>\n<span class=\"c1\">#  &#39;is_staff&#39;, &#39;is_superuser&#39;]</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;description&#39;</span><span class=\"p\">],</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"c1\"># Return all fields including foreign key and except related models</span>\n<span class=\"c1\"># (serializing many=True).</span>\n<span class=\"c1\"># [&#39;pk&#39;, &#39;model_class&#39;, &#39;username&#39;, &#39;email&#39;, &#39;first_name&#39;,</span>\n<span class=\"c1\">#  &#39;last_name&#39;, &#39;last_login&#39;, &#39;date_joined&#39;, &#39;is_active&#39;,</span>\n<span class=\"c1\">#  &#39;is_staff&#39;, &#39;is_superuser&#39;, &#39;company&#39;]</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"c1\"># related_fields=True will be ignored for many=True</span>\n    <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"c1\"># Return fields set as default list fields</span>\n<span class=\"c1\"># [&quot;pk&quot;, &quot;model_class&quot;, &#39;is_active&#39;, &#39;is_superuser&#39;,</span>\n<span class=\"c1\">#  &#39;is_staff&#39;, &#39;username&#39;, &#39;email&#39;, &#39;last_login&#39;]</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;description&#39;</span><span class=\"p\">],</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"c1\"># Return all fields including foreign key and related for one</span>\n<span class=\"c1\"># object</span>\n<span class=\"c1\"># [&#39;pk&#39;, &#39;model_class&#39;, &#39;username&#39;, &#39;email&#39;, &#39;first_name&#39;,</span>\n<span class=\"c1\">#  &#39;last_name&#39;, &#39;last_login&#39;, &#39;date_joined&#39;, &#39;is_active&#39;,</span>\n<span class=\"c1\">#  &#39;is_staff&#39;, &#39;is_superuser&#39;, &#39;mfa_method_set&#39;,</span>\n<span class=\"c1\">#  &#39;api_permission_set&#39;, &#39;api_permission_group_set&#39;,</span>\n<span class=\"c1\">#  &#39;company&#39;]</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"c1\"># Return all fields, but foreign key and related for one</span>\n<span class=\"c1\"># object</span>\n<span class=\"c1\"># [&#39;pk&#39;, &#39;model_class&#39;, &#39;username&#39;, &#39;email&#39;, &#39;first_name&#39;,</span>\n<span class=\"c1\">#  &#39;last_name&#39;, &#39;last_login&#39;, &#39;date_joined&#39;, &#39;is_active&#39;,</span>\n<span class=\"c1\">#  &#39;is_staff&#39;, &#39;is_superuser&#39;]</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n</code></pre>\n  </div>\n</blockquote>\n", "bases": "pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer"}, {"fullname": "pumpwood_djangoauth.i8n.serializers.PumpwoodI8nTranslationSerializer.model_class", "modulename": "pumpwood_djangoauth.i8n.serializers", "qualname": "PumpwoodI8nTranslationSerializer.model_class", "kind": "variable", "doc": "<p>Always <code>model_class</code> associated with object for all Pumpwood objects.\nSet default ClassNameField() for this field</p>\n"}, {"fullname": "pumpwood_djangoauth.i8n.translate", "modulename": "pumpwood_djangoauth.i8n.translate", "kind": "module", "doc": "<p>Create a class to make lazy translation of strings.</p>\n"}, {"fullname": "pumpwood_djangoauth.i8n.translate.aux_translate_string", "modulename": "pumpwood_djangoauth.i8n.translate", "qualname": "aux_translate_string", "kind": "function", "doc": "<p>Translate string using microservice.</p>\n\n<p>Cache results to reduce database calls.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sentence [str]:</strong>  Sentence to be translated.</li>\n<li><strong>tag [str]:</strong>  Tag used in translation.</li>\n<li><strong>plural [str]:</strong>  If should be translated on plural.</li>\n<li><strong>language [str]:</strong>  Language to translate.</li>\n<li><strong>user_type [str]:</strong>  It is possible to set diferente types of user for\ntranslation.</li>\n</ul>\n\n<p>Return [str]:\n    Return translated sentence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sentence</span>, </span><span class=\"param\"><span class=\"n\">tag</span>, </span><span class=\"param\"><span class=\"n\">plural</span>, </span><span class=\"param\"><span class=\"n\">language</span>, </span><span class=\"param\"><span class=\"n\">user_type</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.translate.t", "modulename": "pumpwood_djangoauth.i8n.translate", "qualname": "t", "kind": "function", "doc": "<p>Create a Lazy String to translate sentence when used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sentence</span>, </span><span class=\"param\"><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">plural</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">user_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.i8n.urls", "modulename": "pumpwood_djangoauth.i8n.urls", "kind": "module", "doc": "<p>Register URL.</p>\n"}, {"fullname": "pumpwood_djangoauth.i8n.views", "modulename": "pumpwood_djangoauth.i8n.views", "kind": "module", "doc": "<p>Create views for metabase end-points.</p>\n"}, {"fullname": "pumpwood_djangoauth.i8n.views.RestPumpwoodI8nTranslation", "modulename": "pumpwood_djangoauth.i8n.views", "qualname": "RestPumpwoodI8nTranslation", "kind": "class", "doc": "<p>Basic View-Set for pumpwood rest end-points.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">metabase.models</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboard</span>\n<span class=\"kn\">from</span> <span class=\"nn\">metabase.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">storage_object</span><span class=\"p\">,</span> <span class=\"n\">microservice</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RestMetabaseDashboard</span><span class=\"p\">(</span><span class=\"n\">PumpWoodRestService</span><span class=\"p\">):</span>\n    <span class=\"n\">endpoint_description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Metabase Dashboard&quot;</span>\n    <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Register and generate url to embed Metabase dashboards&quot;</span>\n\n    <span class=\"c1\"># Django model that will be mapped to this end-point</span>\n    <span class=\"n\">service_model</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboard</span>\n\n    <span class=\"c1\"># Serializer that will be used to dump model data</span>\n    <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n\n    <span class=\"c1\"># PumpwoodStorage object that will be used to save and retrieve</span>\n    <span class=\"c1\"># file data from storage.</span>\n    <span class=\"n\">storage_object</span> <span class=\"o\">=</span> <span class=\"n\">storage_object</span>\n\n    <span class=\"c1\"># PumpWoodMicroService object used to communicate with other</span>\n    <span class=\"c1\"># microservice if necessary. Ex: Trigger ETL Jobs on object</span>\n    <span class=\"c1\"># saving and update.</span>\n    <span class=\"n\">microservice</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span>\n\n    <span class=\"c1\"># Fields that will be considered as files and extensions that</span>\n    <span class=\"c1\"># will be accepted.</span>\n    <span class=\"n\">file_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;file&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xlsx&#39;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">###########################################################</span>\n    <span class=\"c1\"># Gui this information will be returned at retrieve_options</span>\n    <span class=\"c1\"># to help frontend correctly render app frontend.</span>\n    <span class=\"c1\"># Set field sets, grouping the fields and hiding those that</span>\n    <span class=\"c1\"># ar not listed on fieldsets</span>\n    <span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># This fields will be set as readonly if fill_options_validation</span>\n    <span class=\"c1\"># is called with query parameter `?user_type=gui`</span>\n    <span class=\"n\">gui_readonly</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;updated_by_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Indication how the object could be presented to user</span>\n    <span class=\"n\">gui_verbose_field</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{pk}</span><span class=\"s1\"> | </span><span class=\"si\">{description}</span><span class=\"s1\">&#39;</span>\n</code></pre>\n</div>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.i8n.views.RestPumpwoodI8nTranslation.endpoint_description", "modulename": "pumpwood_djangoauth.i8n.views", "qualname": "RestPumpwoodI8nTranslation.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;I8n Translations&#x27;"}, {"fullname": "pumpwood_djangoauth.i8n.views.RestPumpwoodI8nTranslation.service_model", "modulename": "pumpwood_djangoauth.i8n.views", "qualname": "RestPumpwoodI8nTranslation.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.i8n.models.PumpwoodI8nTranslation&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.i8n.views.RestPumpwoodI8nTranslation.serializer", "modulename": "pumpwood_djangoauth.i8n.views", "qualname": "RestPumpwoodI8nTranslation.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.i8n.serializers.PumpwoodI8nTranslationSerializer&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.i8n.views.RestPumpwoodI8nTranslation.storage_object", "modulename": "pumpwood_djangoauth.i8n.views", "qualname": "RestPumpwoodI8nTranslation.storage_object", "kind": "variable", "doc": "<p>PumpwoodStorage object that will be used to save and retrieve\nfile data from storage.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.i8n.views.RestPumpwoodI8nTranslation.microservice", "modulename": "pumpwood_djangoauth.i8n.views", "qualname": "RestPumpwoodI8nTranslation.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object used to communicate with other\nmicroservice if necessary. Ex: Trigger ETL Jobs on object\nsaving and update.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.i8n.views.RestPumpwoodI8nTranslation.file_fields", "modulename": "pumpwood_djangoauth.i8n.views", "qualname": "RestPumpwoodI8nTranslation.file_fields", "kind": "variable", "doc": "<p>File fields associated with model, it is a dictonary with keys as\nfield keys and values as a list of accepted extensions.</p>\n", "default_value": "{}"}, {"fullname": "pumpwood_djangoauth.i8n.views.RestPumpwoodI8nTranslation.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.i8n.views", "qualname": "RestPumpwoodI8nTranslation.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;sentence&#x27;, &#x27;tag&#x27;, &#x27;plural&#x27;, &#x27;language&#x27;, &#x27;user_type&#x27;, &#x27;translation&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.i8n.views.RestPumpwoodI8nTranslation.gui_readonly", "modulename": "pumpwood_djangoauth.i8n.views", "qualname": "RestPumpwoodI8nTranslation.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;updated_by&#x27;, &#x27;updated_at&#x27;, &#x27;extra_info&#x27;]"}, {"fullname": "pumpwood_djangoauth.i8n.views.RestPumpwoodI8nTranslation.gui_verbose_field", "modulename": "pumpwood_djangoauth.i8n.views", "qualname": "RestPumpwoodI8nTranslation.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk} | {description}&#x27;"}, {"fullname": "pumpwood_djangoauth.kong", "modulename": "pumpwood_djangoauth.kong", "kind": "module", "doc": "<h1 id=\"auxiliary-codes-for-registring-services-and-routes-on-kong\">Auxiliary codes for registring services and routes on Kong.</h1>\n"}, {"fullname": "pumpwood_djangoauth.kong.create_routes", "modulename": "pumpwood_djangoauth.kong.create_routes", "kind": "module", "doc": "<p>Create routes and services.</p>\n"}, {"fullname": "pumpwood_djangoauth.kong.create_routes.register_auth_kong_objects", "modulename": "pumpwood_djangoauth.kong.create_routes", "qualname": "register_auth_kong_objects", "kind": "function", "doc": "<p>Register auth objects in kong and add them to database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>service_url [str]:</strong>  Microservice endpoint url.</li>\n<li><strong>service_name [str]:</strong>  Service name</li>\n<li><strong>healthcheck_route [str]:</strong>  Health-check url for the microservice.</li>\n<li><strong>routes [list[dict]]:</strong>  List of information to create routes associated\nwith the microservice. Ex:\n    {\n        \"route_url\": \"/rest/kongroute/\",\n        \"route_name\": \"pumpwood-auth-app--kongroute\",\n        \"route_type\": \"endpoint\",\n        \"description\": \"Microservice Routes\",\n        \"strip_path\": False,\n        \"notes\": (\n            \"Routes registred on Pumpwood, each one is associated \"\n            \"with a microservice service.\"),\n        \"dimensions\": {\n            \"microservice\": \"pumpwood-auth-app\",\n            \"service_type\": \"core\",\n            \"function\": \"system\",\n            \"endpoint\": \"kongroute\",\n            \"route_type\": \"endpoint\"},\n        \"icon\": \"\"\n    }, {  # Admin\n        \"route_url\": \"/admin/pumpwood-auth-app/gui/\",\n        \"route_name\": \"pumpwood-auth-app--admin\",\n        \"route_type\": \"admin\",\n        \"description\": \"Pumpwood Auth Admin\",\n        \"notes\": (\n            \"Admin for pumpwood-auth-app microservice.\"),\n        \"dimensions\": {\n            \"microservice\": \"pumpwood-auth-app\",\n            \"service_type\": \"core\",\n            \"function\": \"gui\",\n            \"route_type\": \"admin\"},\n        \"icon\": \"\"\n    }</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">service_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">service_description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">service_notes</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">service_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">service_dimensions</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">healthcheck_route</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">routes</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">viewsets</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">service_icon</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">service_extra_info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.log", "modulename": "pumpwood_djangoauth.log", "kind": "module", "doc": "<h1 id=\"auxiliary-codes-for-aplication-logging\">Auxiliary codes for aplication logging.</h1>\n"}, {"fullname": "pumpwood_djangoauth.log.functions", "modulename": "pumpwood_djangoauth.log.functions", "kind": "module", "doc": "<p>Functions to log activity at rest APIs.</p>\n"}, {"fullname": "pumpwood_djangoauth.log.functions.log_api_request", "modulename": "pumpwood_djangoauth.log.functions", "qualname": "log_api_request", "kind": "function", "doc": "<p>Log API request using a RabbitMQ queue, if rabbitmq_api is not None.</p>\n\n<p>RabbitMQ queue will be consumed by a worker, that may latter save\ninformation for audit.</p>\n\n<p>If rabbitmq_api is not set, logs will be sent to STDOUT with prefix,</p>\n\n<h2 id=\"api_request_log\">api_request_log ## .</h2>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>user_id [int]:</strong>  ID of the logged user reponsible for the request.</li>\n<li><strong>permission_check [str]:</strong>  Result of the permission check of the user.</li>\n<li><strong>request_method [str]:</strong>  Method used on request, POST, GET, DELETE, ...</li>\n<li><strong>path [str]:</strong>  Full request path.</li>\n<li><strong>model_class [str]:</strong>  Model class associated with request.</li>\n<li><strong>end_point [str]:</strong>  End-point used at the call, ex: retrieve, list,\ndelete, save, retrieve-file, ...</li>\n<li><strong>first_arg [str]:</strong>  First argument of the end-point.</li>\n<li><strong>second_arg [str]:</strong>  Second argument of the end-point.</li>\n<li><strong>payload [str]:</strong>  Payload of POST request, it will be limited to 300\ncharacters avoiding overload during database uploads.</li>\n<li><strong>ingress_request [str]:</strong>  Log if call came througth ingress or was\ncluster internal.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<p>Return [dict]:\n    Return the dictionary that will be passed to RabbitMQ.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">permission_check</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">request_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">end_point</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">first_arg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">second_arg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ingress_request</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.log.middleware", "modulename": "pumpwood_djangoauth.log.middleware", "kind": "module", "doc": "<p>Logging Middlewares.</p>\n"}, {"fullname": "pumpwood_djangoauth.log.middleware.RequestLogMiddleware", "modulename": "pumpwood_djangoauth.log.middleware", "qualname": "RequestLogMiddleware", "kind": "class", "doc": "<p>Request Logging Middleware for Pumpwood Calls.</p>\n"}, {"fullname": "pumpwood_djangoauth.log.middleware.RequestLogMiddleware.log_admin_calls", "modulename": "pumpwood_djangoauth.log.middleware", "qualname": "RequestLogMiddleware.log_admin_calls", "kind": "function", "doc": "<p>Log admin calls on Pumpwood Backends.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.log.middleware.RequestLogMiddleware.log_media_calls", "modulename": "pumpwood_djangoauth.log.middleware", "qualname": "RequestLogMiddleware.log_media_calls", "kind": "function", "doc": "<p>Log Media calls using django views.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.log.middleware.RequestLogMiddleware.log_rest_calls", "modulename": "pumpwood_djangoauth.log.middleware", "qualname": "RequestLogMiddleware.log_rest_calls", "kind": "function", "doc": "<p>Log rest calls on Pumpwood Backends.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase", "modulename": "pumpwood_djangoauth.metabase", "kind": "module", "doc": "<h1 id=\"models-and-end-points-to-deploy-metabase-dashboards\">Models and end-points to deploy Metabase Dashboards.</h1>\n"}, {"fullname": "pumpwood_djangoauth.metabase.models", "modulename": "pumpwood_djangoauth.metabase.models", "kind": "module", "doc": "<p>Manage Kong routes for Pumpwood.</p>\n"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard", "kind": "class", "doc": "<p>Metabase dashboard to serve using Pumpwood.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.status", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.status", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.alias", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.alias", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.description", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.description", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.notes", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.notes", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.auto_embedding", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.auto_embedding", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.object_model_class", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.object_model_class", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.object_pk", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.object_pk", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.metabase_id", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.metabase_id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.expire_in_min", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.expire_in_min", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.default_theme", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.default_theme", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.default_is_bordered", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.default_is_bordered", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.default_is_titled", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.default_is_titled", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.dimensions", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.dimensions", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.extra_info", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.extra_info", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.updated_by", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.updated_by", "kind": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.updated_at", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.updated_at", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.save", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.save", "kind": "function", "doc": "<p>Ovewrite save to add output_modeling_unit_id.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.dump_dashboards", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.dump_dashboards", "kind": "function", "doc": "<p>Dump dashboard and parameters to load on another server.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>filter_alias [List[str]]: Filter dashboard that will be dumped.\n  exclude_alias [List[str]]: Exclude dashboard that will be dumped.</p>\n</blockquote>\n\n<p>Return List[dict]:\n    List of serialized dashboards and its parameters without pks\n    associated with them.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">filter_alias</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_alias</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.load_dashboards", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.load_dashboards", "kind": "function", "doc": "<p>Load dashboard and parameters to load on another server.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dashboard_dump [list[dict]]:</strong>  List of dumped dashboards and its\nparameters.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No kwargs.</p>\n</blockquote>\n\n<p>Return [bool]:\n    Return true..</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dashboard_dump</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.generate_url_from_alias", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.generate_url_from_alias", "kind": "function", "doc": "<p>Generate url to embed graph and dash with iframe using alias.</p>\n\n<p>Use dashboard alias to create iframe link. This might help when\nreplicating enviroments and dashboards.</p>\n\n<p>Create a url to embedded dashboard or graph on front end using\niframe. Ex.:\n    <iframe\n        src=\"{% metabase_dash_url 1 %}\"\n        frameborder=\"0\"\n        width=\"800\"\n        height=\"600\"\n        allowtransparency</p>\n\n<blockquote>\n  <p></iframe>\n  Args\n      No Args.</p>\n</blockquote>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>list_service_id [list]: List of ids to reload routes on Kong.</p>\n</blockquote>\n\n<p>Return [bool]:\n    Return true.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">alias</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">dashboard_parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bordered</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">titled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.generate_url", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.generate_url", "kind": "function", "doc": "<p>Generate url to embed graph and dash with iframe.</p>\n\n<p>Create a url to embedded dashboard or graph on front end using\niframe. Ex.:\n    <iframe\n        src=\"{% metabase_dash_url 1 %}\"\n        frameborder=\"0\"\n        width=\"800\"\n        height=\"600\"\n        allowtransparency</p>\n\n<blockquote>\n  <p></iframe>\n  Args\n      No Args.</p>\n</blockquote>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>list_service_id [list]: List of ids to reload routes on Kong.</p>\n</blockquote>\n\n<p>Return [bool]:\n    Return true.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">dashboard_parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bordered</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">titled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.DoesNotExist", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.get_status_display", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.get_status_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.get_default_theme_display", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.get_default_theme_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.get_next_by_updated_at", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.get_next_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.get_previous_by_updated_at", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.get_previous_by_updated_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.id", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboard.parameter_set", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboard.parameter_set", "kind": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboardParameter", "kind": "class", "doc": "<p>Routes registred on Kong API Gateway.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter.dashboard", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboardParameter.dashboard", "kind": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter.type", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboardParameter.type", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter.name", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboardParameter.name", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter.notes", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboardParameter.notes", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter.default_value", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboardParameter.default_value", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter.DoesNotExist", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboardParameter.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboardParameter.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter.get_type_display", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboardParameter.get_type_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter.id", "modulename": "pumpwood_djangoauth.metabase.models", "qualname": "MetabaseDashboardParameter.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.metabase.views", "modulename": "pumpwood_djangoauth.metabase.views", "kind": "module", "doc": "<p>Create views for metabase end-points.</p>\n"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboard", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboard", "kind": "class", "doc": "<p>Basic View-Set for pumpwood rest end-points.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">metabase.models</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboard</span>\n<span class=\"kn\">from</span> <span class=\"nn\">metabase.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">storage_object</span><span class=\"p\">,</span> <span class=\"n\">microservice</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RestMetabaseDashboard</span><span class=\"p\">(</span><span class=\"n\">PumpWoodRestService</span><span class=\"p\">):</span>\n    <span class=\"n\">endpoint_description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Metabase Dashboard&quot;</span>\n    <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Register and generate url to embed Metabase dashboards&quot;</span>\n\n    <span class=\"c1\"># Django model that will be mapped to this end-point</span>\n    <span class=\"n\">service_model</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboard</span>\n\n    <span class=\"c1\"># Serializer that will be used to dump model data</span>\n    <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n\n    <span class=\"c1\"># PumpwoodStorage object that will be used to save and retrieve</span>\n    <span class=\"c1\"># file data from storage.</span>\n    <span class=\"n\">storage_object</span> <span class=\"o\">=</span> <span class=\"n\">storage_object</span>\n\n    <span class=\"c1\"># PumpWoodMicroService object used to communicate with other</span>\n    <span class=\"c1\"># microservice if necessary. Ex: Trigger ETL Jobs on object</span>\n    <span class=\"c1\"># saving and update.</span>\n    <span class=\"n\">microservice</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span>\n\n    <span class=\"c1\"># Fields that will be considered as files and extensions that</span>\n    <span class=\"c1\"># will be accepted.</span>\n    <span class=\"n\">file_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;file&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xlsx&#39;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">###########################################################</span>\n    <span class=\"c1\"># Gui this information will be returned at retrieve_options</span>\n    <span class=\"c1\"># to help frontend correctly render app frontend.</span>\n    <span class=\"c1\"># Set field sets, grouping the fields and hiding those that</span>\n    <span class=\"c1\"># ar not listed on fieldsets</span>\n    <span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># This fields will be set as readonly if fill_options_validation</span>\n    <span class=\"c1\"># is called with query parameter `?user_type=gui`</span>\n    <span class=\"n\">gui_readonly</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;updated_by_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Indication how the object could be presented to user</span>\n    <span class=\"n\">gui_verbose_field</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{pk}</span><span class=\"s1\"> | </span><span class=\"si\">{description}</span><span class=\"s1\">&#39;</span>\n</code></pre>\n</div>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboard.endpoint_description", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboard.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;Metabase Dashboard&#x27;"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboard.service_model", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboard.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.metabase.models.MetabaseDashboard&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboard.serializer", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboard.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.metabase.serializers.MetabaseDashboardSerializer&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboard.storage_object", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboard.storage_object", "kind": "variable", "doc": "<p>PumpwoodStorage object that will be used to save and retrieve\nfile data from storage.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboard.microservice", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboard.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object used to communicate with other\nmicroservice if necessary. Ex: Trigger ETL Jobs on object\nsaving and update.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboard.file_fields", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboard.file_fields", "kind": "variable", "doc": "<p>File fields associated with model, it is a dictonary with keys as\nfield keys and values as a list of accepted extensions.</p>\n", "default_value": "{}"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboard.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboard.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;status&#x27;, &#x27;alias&#x27;, &#x27;description&#x27;, &#x27;notes&#x27;, &#x27;dimensions&#x27;, &#x27;updated_by&#x27;, &#x27;updated_at&#x27;]}, {&#x27;name&#x27;: &#x27;embedding&#x27;, &#x27;fields&#x27;: [&#x27;metabase_id&#x27;, &#x27;auto_embedding&#x27;, &#x27;object_model_class&#x27;, &#x27;object_pk&#x27;]}, {&#x27;name&#x27;: &#x27;config&#x27;, &#x27;fields&#x27;: [&#x27;expire_in_min&#x27;, &#x27;default_theme&#x27;, &#x27;default_is_bordered&#x27;, &#x27;default_is_titled&#x27;]}, {&#x27;name&#x27;: &#x27;extra_info&#x27;, &#x27;fields&#x27;: [&#x27;extra_info&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboard.gui_readonly", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboard.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;updated_by_id&#x27;, &#x27;updated_at&#x27;, &#x27;extra_info&#x27;]"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboard.gui_verbose_field", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboard.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk} | {description}&#x27;"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboardParameter", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboardParameter", "kind": "class", "doc": "<p>Basic View-Set for pumpwood rest end-points.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">metabase.models</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboard</span>\n<span class=\"kn\">from</span> <span class=\"nn\">metabase.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">storage_object</span><span class=\"p\">,</span> <span class=\"n\">microservice</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RestMetabaseDashboard</span><span class=\"p\">(</span><span class=\"n\">PumpWoodRestService</span><span class=\"p\">):</span>\n    <span class=\"n\">endpoint_description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Metabase Dashboard&quot;</span>\n    <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Register and generate url to embed Metabase dashboards&quot;</span>\n\n    <span class=\"c1\"># Django model that will be mapped to this end-point</span>\n    <span class=\"n\">service_model</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboard</span>\n\n    <span class=\"c1\"># Serializer that will be used to dump model data</span>\n    <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n\n    <span class=\"c1\"># PumpwoodStorage object that will be used to save and retrieve</span>\n    <span class=\"c1\"># file data from storage.</span>\n    <span class=\"n\">storage_object</span> <span class=\"o\">=</span> <span class=\"n\">storage_object</span>\n\n    <span class=\"c1\"># PumpWoodMicroService object used to communicate with other</span>\n    <span class=\"c1\"># microservice if necessary. Ex: Trigger ETL Jobs on object</span>\n    <span class=\"c1\"># saving and update.</span>\n    <span class=\"n\">microservice</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span>\n\n    <span class=\"c1\"># Fields that will be considered as files and extensions that</span>\n    <span class=\"c1\"># will be accepted.</span>\n    <span class=\"n\">file_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;file&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xlsx&#39;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">###########################################################</span>\n    <span class=\"c1\"># Gui this information will be returned at retrieve_options</span>\n    <span class=\"c1\"># to help frontend correctly render app frontend.</span>\n    <span class=\"c1\"># Set field sets, grouping the fields and hiding those that</span>\n    <span class=\"c1\"># ar not listed on fieldsets</span>\n    <span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># This fields will be set as readonly if fill_options_validation</span>\n    <span class=\"c1\"># is called with query parameter `?user_type=gui`</span>\n    <span class=\"n\">gui_readonly</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;updated_by_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Indication how the object could be presented to user</span>\n    <span class=\"n\">gui_verbose_field</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{pk}</span><span class=\"s1\"> | </span><span class=\"si\">{description}</span><span class=\"s1\">&#39;</span>\n</code></pre>\n</div>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboardParameter.endpoint_description", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboardParameter.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;Metabase Dashboard parameters&#x27;"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboardParameter.service_model", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboardParameter.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.metabase.models.MetabaseDashboardParameter&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboardParameter.serializer", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboardParameter.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.metabase.serializers.MetabaseDashboardParameterSerializer&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboardParameter.storage_object", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboardParameter.storage_object", "kind": "variable", "doc": "<p>PumpwoodStorage object that will be used to save and retrieve\nfile data from storage.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboardParameter.microservice", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboardParameter.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object used to communicate with other\nmicroservice if necessary. Ex: Trigger ETL Jobs on object\nsaving and update.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService", "default_value": "&lt;pumpwood_communication.microservices.PumpWoodMicroService object&gt;"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboardParameter.file_fields", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboardParameter.file_fields", "kind": "variable", "doc": "<p>File fields associated with model, it is a dictonary with keys as\nfield keys and values as a list of accepted extensions.</p>\n", "default_value": "{}"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboardParameter.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboardParameter.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;dashboard_id&#x27;, &#x27;name&#x27;, &#x27;notes&#x27;, &#x27;type&#x27;, &#x27;default_value&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboardParameter.gui_readonly", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboardParameter.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[]"}, {"fullname": "pumpwood_djangoauth.metabase.views.RestMetabaseDashboardParameter.gui_verbose_field", "modulename": "pumpwood_djangoauth.metabase.views", "qualname": "RestMetabaseDashboardParameter.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{dashboard_id} | {name}&#x27;"}, {"fullname": "pumpwood_djangoauth.mfaadmin", "modulename": "pumpwood_djangoauth.mfaadmin", "kind": "module", "doc": "<h1 id=\"views-and-admin-templates-associated-with-mfa-login-validation\">Views and admin templates associated with MFA login validation.</h1>\n"}, {"fullname": "pumpwood_djangoauth.mfaadmin.admin", "modulename": "pumpwood_djangoauth.mfaadmin.admin", "kind": "module", "doc": "<p>Create an admin site using MFAAdmin.</p>\n"}, {"fullname": "pumpwood_djangoauth.mfaadmin.admin.MFAAdmin", "modulename": "pumpwood_djangoauth.mfaadmin.admin", "qualname": "MFAAdmin", "kind": "class", "doc": "<p>An AdminSite object encapsulates an instance of the Django admin application, ready\nto be hooked in to your URLconf. Models are registered with the AdminSite using the\nregister() method, and the get_urls() method can then be used to access Django view\nfunctions that present a full admin interface for the collection of registered\nmodels.</p>\n", "bases": "django.contrib.admin.sites.AdminSite"}, {"fullname": "pumpwood_djangoauth.mfaadmin.admin.MFAAdmin.login", "modulename": "pumpwood_djangoauth.mfaadmin.admin", "qualname": "MFAAdmin.login", "kind": "function", "doc": "<p>Display the login form for the given HttpRequest.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">extra_context</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.mfaadmin.forms", "modulename": "pumpwood_djangoauth.mfaadmin.forms", "kind": "module", "doc": "<p>Create custom login form.</p>\n"}, {"fullname": "pumpwood_djangoauth.mfaadmin.forms.MFAAuthenticationForm", "modulename": "pumpwood_djangoauth.mfaadmin.forms", "qualname": "MFAAuthenticationForm", "kind": "class", "doc": "<p>Base class for authenticating users. Extend this to get a form that accepts\nusername/password logins.</p>\n", "bases": "django.contrib.auth.forms.AuthenticationForm"}, {"fullname": "pumpwood_djangoauth.mfaadmin.forms.MFAAuthenticationForm.clean", "modulename": "pumpwood_djangoauth.mfaadmin.forms", "qualname": "MFAAuthenticationForm.clean", "kind": "function", "doc": "<p>Hook for doing any extra form-wide cleaning after Field.clean() has been\ncalled on every field. Any ValidationError raised by this method will\nnot be associated with a particular field; it will have a special-case\nassociation with the field named '__all__'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.mfaadmin.forms.MFAAuthenticationForm.create_mfa_token", "modulename": "pumpwood_djangoauth.mfaadmin.forms", "qualname": "MFAAuthenticationForm.create_mfa_token", "kind": "function", "doc": "<p>Create an MFA token.</p>\n\n<p>user [User]: Autenticated user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user</span>, </span><span class=\"param\"><span class=\"n\">priority_mfa</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.mfaadmin.forms.MFAAuthenticationForm.media", "modulename": "pumpwood_djangoauth.mfaadmin.forms", "qualname": "MFAAuthenticationForm.media", "kind": "variable", "doc": "<p>Return all media required to render the widgets on this form.</p>\n"}, {"fullname": "pumpwood_djangoauth.mfaadmin.forms.MFATokenValidationForm", "modulename": "pumpwood_djangoauth.mfaadmin.forms", "qualname": "MFATokenValidationForm", "kind": "class", "doc": "<p>A collection of Fields, plus their associated data.</p>\n", "bases": "django.forms.forms.Form"}, {"fullname": "pumpwood_djangoauth.mfaadmin.forms.MFATokenValidationForm.clean", "modulename": "pumpwood_djangoauth.mfaadmin.forms", "qualname": "MFATokenValidationForm.clean", "kind": "function", "doc": "<p>Hook for doing any extra form-wide cleaning after Field.clean() has been\ncalled on every field. Any ValidationError raised by this method will\nnot be associated with a particular field; it will have a special-case\nassociation with the field named '__all__'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.mfaadmin.forms.MFATokenValidationForm.media", "modulename": "pumpwood_djangoauth.mfaadmin.forms", "qualname": "MFATokenValidationForm.media", "kind": "variable", "doc": "<p>Return all media required to render the widgets on this form.</p>\n"}, {"fullname": "pumpwood_djangoauth.mfaadmin.views", "modulename": "pumpwood_djangoauth.mfaadmin.views", "kind": "module", "doc": "<p>Views for MFA Autentication.</p>\n"}, {"fullname": "pumpwood_djangoauth.mfaadmin.views.MFALoginView", "modulename": "pumpwood_djangoauth.mfaadmin.views", "qualname": "MFALoginView", "kind": "class", "doc": "<p>Custom login view that will generate a MFA Code.</p>\n\n<p>It will generate MFA Method.</p>\n", "bases": "django.contrib.auth.views.LoginView"}, {"fullname": "pumpwood_djangoauth.mfaadmin.views.MFALoginView.dispatch", "modulename": "pumpwood_djangoauth.mfaadmin.views", "qualname": "MFALoginView.dispatch", "kind": "function", "doc": "<p>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.mfaadmin.views.MFALoginView.form_valid", "modulename": "pumpwood_djangoauth.mfaadmin.views", "qualname": "MFALoginView.form_valid", "kind": "function", "doc": "<p>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">form</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.mfaadmin.views.MFATokenValidationView", "modulename": "pumpwood_djangoauth.mfaadmin.views", "qualname": "MFATokenValidationView", "kind": "class", "doc": "<p>View to validate MFA Code using MFA token as autorization.</p>\n", "bases": "django.views.generic.edit.FormView"}, {"fullname": "pumpwood_djangoauth.mfaadmin.views.MFATokenValidationView.dispatch", "modulename": "pumpwood_djangoauth.mfaadmin.views", "qualname": "MFATokenValidationView.dispatch", "kind": "function", "doc": "<p>Ovewrite dispatch to check for MFA header.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.mfaadmin.views.MFATokenValidationView.get_form_kwargs", "modulename": "pumpwood_djangoauth.mfaadmin.views", "qualname": "MFATokenValidationView.get_form_kwargs", "kind": "function", "doc": "<p>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.mfaadmin.views.MFATokenValidationView.get_success_url", "modulename": "pumpwood_djangoauth.mfaadmin.views", "qualname": "MFATokenValidationView.get_success_url", "kind": "function", "doc": "<p>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.mfaadmin.views.MFATokenValidationView.form_valid", "modulename": "pumpwood_djangoauth.mfaadmin.views", "qualname": "MFATokenValidationView.form_valid", "kind": "function", "doc": "<p>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">form</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration", "modulename": "pumpwood_djangoauth.registration", "kind": "module", "doc": "<h1 id=\"registraion-and-login-models-and-views\">Registraion and login models and views.</h1>\n"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux", "modulename": "pumpwood_djangoauth.registration.mfa_aux", "kind": "module", "doc": "<p>Auxiliary codes associated with MFA implementation.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.app_log", "modulename": "pumpwood_djangoauth.registration.mfa_aux.app_log", "kind": "module", "doc": "<p>Implement MFA for app log.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.app_log.send_code", "modulename": "pumpwood_djangoauth.registration.mfa_aux.app_log", "qualname": "send_code", "kind": "function", "doc": "<p>Send MFA authenticatication code to stdout.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code [str]:</strong>  MFA code.</li>\n<li><strong>user:</strong>  Django user to send message to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mfa_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.main", "modulename": "pumpwood_djangoauth.registration.mfa_aux.main", "kind": "module", "doc": "<p>Main method to send MFA codes.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.main.send_mfa_code", "modulename": "pumpwood_djangoauth.registration.mfa_aux.main", "qualname": "send_mfa_code", "kind": "function", "doc": "<p>Send mfa code using enviroment variable PUMPWOOD__MFA__APPLICATION_NAME.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>type [str]:</strong>  Type of the MFA backend.</li>\n<li><strong>code [str]:</strong>  Code to be send for mfa validation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mfa_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.twilio_sms", "modulename": "pumpwood_djangoauth.registration.mfa_aux.twilio_sms", "kind": "module", "doc": "<p>Implement MFA using Twilio SMS.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.twilio_sms.send_code", "modulename": "pumpwood_djangoauth.registration.mfa_aux.twilio_sms", "qualname": "send_code", "kind": "function", "doc": "<p>Send MFA authenticatication code to stdout.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code [str]:</strong>  MFA code.</li>\n<li><strong>mfa_method:</strong>  PumpwoodMFAMethod object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mfa_method</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.code", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.code", "kind": "module", "doc": "<p>View for MFA using codes like SMS, email, etc...</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.code.create_new_mfa_code", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.code", "qualname": "create_new_mfa_code", "kind": "function", "doc": "<p>Create a new MFA code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django Rest request.</li>\n</ul>\n\n<p>Return [bool]:\n    Return True if code sent to MFA.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.code.MFALoginView", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.code", "qualname": "MFALoginView", "kind": "class", "doc": "<p>Intentionally simple parent class for all views. Only implements\ndispatch-by-method and simple sanity checking.</p>\n", "bases": "knox.views.LoginView"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.code.MFALoginView.post", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.code", "qualname": "MFALoginView.post", "kind": "function", "doc": "<p>Login user with MFA Token and MFA Code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.oauth2", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.oauth2", "kind": "module", "doc": "<p>Views for authentication and user end-point.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.oauth2.oauth2_get_authorization_url", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.oauth2", "qualname": "oauth2_get_authorization_url", "kind": "function", "doc": "<p>Processs callback from Auth2.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>email [str]:</strong>  User e-mail to generate SSO log-in.</li>\n</ul>\n\n<p>Return [str]:\n    .</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.oauth2.SSOLoginView", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.oauth2", "qualname": "SSOLoginView", "kind": "class", "doc": "<p>Intentionally simple parent class for all views. Only implements\ndispatch-by-method and simple sanity checking.</p>\n", "bases": "knox.views.LoginView"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.oauth2.SSOLoginView.get", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.oauth2", "qualname": "SSOLoginView.get", "kind": "function", "doc": "<p>Login user with MFA Token and MFA Code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.sso.microsoft_entra", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.sso.microsoft_entra", "kind": "module", "doc": "<p>Make calls to perform SSO using MicrosoftEntra.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.sso.microsoft_entra.MicrosoftEntraSSO", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.sso.microsoft_entra", "qualname": "MicrosoftEntraSSO", "kind": "class", "doc": "<p>Class to help performing Microsoft Entra SSO.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.sso.microsoft_entra.MicrosoftEntraSSO.__init__", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.sso.microsoft_entra", "qualname": "MicrosoftEntraSSO.__init__", "kind": "function", "doc": "<p>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.sso.microsoft_entra.MicrosoftEntraSSO.create_authorization_url", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.sso.microsoft_entra", "qualname": "MicrosoftEntraSSO.create_authorization_url", "kind": "function", "doc": "<p>Create authentication URL for Microsoft Entra SSO.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state [str]:</strong>  Random string used to counter CSRF attacks.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<p>Return [dict]:\n    Dictionary with generated authorization_url and state parameter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.mfa_aux.views.sso.microsoft_entra.MicrosoftEntraSSO.fetch_token", "modulename": "pumpwood_djangoauth.registration.mfa_aux.views.sso.microsoft_entra", "qualname": "MicrosoftEntraSSO.fetch_token", "kind": "function", "doc": "<p>Fetch authorization token and user information.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>authorization_response_url [str]:</strong>  Autorization response url\npassed after redirect of SSO authentication.</li>\n</ul>\n\n<p>Kwargs:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">authorization_response_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models", "modulename": "pumpwood_djangoauth.registration.models", "kind": "module", "doc": "<p>Expand Django users to set more information and password reset.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.models.UserProfile", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "UserProfile", "kind": "class", "doc": "<p>UserProfile(id, user, is_service_user, dimensions, extra_fields)</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.registration.models.UserProfile.user", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "UserProfile.user", "kind": "variable", "doc": "<p>Accessor to the related object on the forward side of a one-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Restaurant(Model):\n    place = OneToOneField(Place, related_name='restaurant')\n</code></pre>\n\n<p><code>Restaurant.place</code> is a <code>ForwardOneToOneDescriptor</code> instance.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.models.UserProfile.is_service_user", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "UserProfile.is_service_user", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.UserProfile.dimensions", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "UserProfile.dimensions", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.UserProfile.extra_fields", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "UserProfile.extra_fields", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.UserProfile.DoesNotExist", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "UserProfile.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.registration.models.UserProfile.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "UserProfile.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.registration.models.UserProfile.id", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "UserProfile.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod", "kind": "class", "doc": "<p>Set MFA associated with user.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.is_enabled", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.is_enabled", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.is_validated", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.is_validated", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.msg", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.msg", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.priority", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.priority", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.user", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.user", "kind": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.type", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.type", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.mfa_parameter", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.mfa_parameter", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.extra_info", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.extra_info", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.save", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.save", "kind": "function", "doc": "<p>Validate creation of MFA when saving object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.run_method", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.run_method", "kind": "function", "doc": "<p>Run MFA method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>mfa_token [str] MFA Token.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<p>Return [dict]:\n    pass</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mfa_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.DoesNotExist", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.get_type_display", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.get_type_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.id", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAMethod.mfa_code_set", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAMethod.mfa_code_set", "kind": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken", "kind": "class", "doc": "<p>Create MFA token when user login and it has MFA enabled.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.token", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.token", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.user", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.user", "kind": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.created_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.created_at", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.expire_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.expire_at", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.save", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.save", "kind": "function", "doc": "<p>Ovewrite save to create primary key and set expire date.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.DoesNotExist", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.get_next_by_created_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.get_next_by_created_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.get_previous_by_created_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.get_previous_by_created_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.get_next_by_expire_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.get_next_by_expire_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.get_previous_by_expire_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.get_previous_by_expire_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFAToken.mfa_code_set", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFAToken.mfa_code_set", "kind": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode", "kind": "class", "doc": "<p>Code associated with MFA session.</p>\n\n<p>It does not have expire date and will respect MFA token expire datetime.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode.token", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode.token", "kind": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode.mfa_method", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode.mfa_method", "kind": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode.code", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode.code", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode.created_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode.created_at", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode.save", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode.save", "kind": "function", "doc": "<p>Create MFA Code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode.DoesNotExist", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode.get_next_by_created_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode.get_next_by_created_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode.get_previous_by_created_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode.get_previous_by_created_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFACode.id", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFACode.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFARecoveryCode", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFARecoveryCode", "kind": "class", "doc": "<p>PumpwoodMFARecoveryCode(id, user, code, created_at)</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFARecoveryCode.user", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFARecoveryCode.user", "kind": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFARecoveryCode.code", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFARecoveryCode.code", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFARecoveryCode.created_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFARecoveryCode.created_at", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFARecoveryCode.DoesNotExist", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFARecoveryCode.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFARecoveryCode.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFARecoveryCode.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFARecoveryCode.get_next_by_created_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFARecoveryCode.get_next_by_created_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFARecoveryCode.get_previous_by_created_at", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFARecoveryCode.get_previous_by_created_at", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.models.PumpwoodMFARecoveryCode.id", "modulename": "pumpwood_djangoauth.registration.models", "qualname": "PumpwoodMFARecoveryCode.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.views", "modulename": "pumpwood_djangoauth.registration.views", "kind": "module", "doc": "<p>Views for authentication and user end-point.</p>\n"}, {"fullname": "pumpwood_djangoauth.registration.views.LoginView", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "LoginView", "kind": "class", "doc": "<p>Intentionally simple parent class for all views. Only implements\ndispatch-by-method and simple sanity checking.</p>\n", "bases": "knox.views.LoginView"}, {"fullname": "pumpwood_djangoauth.registration.views.LoginView.post", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "LoginView.post", "kind": "function", "doc": "<p>Login user using its password and username.</p>\n\n<p>Check if header have indication that the request came from \"outside\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.views.validate_mfa_token", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "validate_mfa_token", "kind": "function", "doc": "<p>Validate MFA Token and return user if possible.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django Rest request.</li>\n</ul>\n\n<p>Return [User]:\n    Return user associated with MFA Token.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.views.get_user_mfa_methods", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "get_user_mfa_methods", "kind": "function", "doc": "<p>Retrieve information about the authenticated user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.views.CheckAuthentication", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "CheckAuthentication", "kind": "class", "doc": "<p>API to validate login token and permission.</p>\n", "bases": "rest_framework.views.APIView"}, {"fullname": "pumpwood_djangoauth.registration.views.CheckAuthentication.get", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "CheckAuthentication.get", "kind": "function", "doc": "<p>Authenticate call legacy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.views.CheckAuthentication.post", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "CheckAuthentication.post", "kind": "function", "doc": "<p>Log API calls.</p>\n\n<p>New end-point that sets setting user_id and other information of the\nrequested API.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.views.retrieve_authenticated_user", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "retrieve_authenticated_user", "kind": "function", "doc": "<p>Retrieve information about the authenticated user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.registration.views.RestUser", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "RestUser", "kind": "class", "doc": "<p>End-point with information about Pumpwood users.</p>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.registration.views.RestUser.endpoint_description", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "RestUser.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;Users&#x27;"}, {"fullname": "pumpwood_djangoauth.registration.views.RestUser.dimensions", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "RestUser.dimensions", "kind": "variable", "doc": "<p>Dimensions associated with end-points. This information will be saved\nat KongRoute dimensions.</p>\n", "annotation": ": dict", "default_value": "{&#x27;microservice&#x27;: &#x27;pumpwood-auth-app&#x27;, &#x27;service_type&#x27;: &#x27;core&#x27;, &#x27;service&#x27;: &#x27;auth&#x27;, &#x27;type&#x27;: &#x27;user&#x27;}"}, {"fullname": "pumpwood_djangoauth.registration.views.RestUser.icon", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "RestUser.icon", "kind": "variable", "doc": "<p>Icon associated with model class. This information will be saved\nat KongRoute icon field.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.registration.views.RestUser.service_model", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "RestUser.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;django.contrib.auth.models.User&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.registration.views.RestUser.serializer", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "RestUser.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.registration.serializers.SerializerUser&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.registration.views.RestUser.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "RestUser.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;username&#x27;, &#x27;first_name&#x27;, &#x27;last_nameis_active&#x27;, &#x27;email&#x27;, &#x27;dimensions&#x27;, &#x27;last_login&#x27;]}, {&#x27;name&#x27;: &#x27;Admin permissions&#x27;, &#x27;fields&#x27;: [&#x27;is_service_user&#x27;, &#x27;is_superuser&#x27;, &#x27;is_staff&#x27;, &#x27;all_permissions&#x27;, &#x27;group_permissions&#x27;]}, {&#x27;name&#x27;: &#x27;API permissions&#x27;, &#x27;fields&#x27;: [&#x27;api_permission_set&#x27;, &#x27;api_permission_group_set&#x27;]}, {&#x27;name&#x27;: &#x27;extra_fields&#x27;, &#x27;fields&#x27;: [&#x27;extra_fields&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.registration.views.RestUser.gui_readonly", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "RestUser.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;last_login&#x27;]"}, {"fullname": "pumpwood_djangoauth.registration.views.RestUser.gui_verbose_field", "modulename": "pumpwood_djangoauth.registration.views", "qualname": "RestUser.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk} | {username}&#x27;"}, {"fullname": "pumpwood_djangoauth.system", "modulename": "pumpwood_djangoauth.system", "kind": "module", "doc": "<h1 id=\"pumpwood-internals-models-and-views\">Pumpwood internals models and views.</h1>\n"}, {"fullname": "pumpwood_djangoauth.system.admin", "modulename": "pumpwood_djangoauth.system.admin", "kind": "module", "doc": "<p>Django admin.</p>\n"}, {"fullname": "pumpwood_djangoauth.system.admin.KongServiceAdmin", "modulename": "pumpwood_djangoauth.system.admin", "qualname": "KongServiceAdmin", "kind": "class", "doc": "<p>Encapsulate all admin options and functionality for a given model.</p>\n", "bases": "django.contrib.admin.options.ModelAdmin"}, {"fullname": "pumpwood_djangoauth.system.admin.KongRouteAdmin", "modulename": "pumpwood_djangoauth.system.admin", "qualname": "KongRouteAdmin", "kind": "class", "doc": "<p>Encapsulate all admin options and functionality for a given model.</p>\n", "bases": "django.contrib.admin.options.ModelAdmin"}, {"fullname": "pumpwood_djangoauth.system.models", "modulename": "pumpwood_djangoauth.system.models", "kind": "module", "doc": "<p>Manage Kong routes for Pumpwood.</p>\n"}, {"fullname": "pumpwood_djangoauth.system.models.KongService", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService", "kind": "class", "doc": "<p>Services Registered at Kong API Gateway.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.service_url", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.service_url", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.order", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.order", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.service_name", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.service_name", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.service_kong_id", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.service_kong_id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.description", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.description", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.notes", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.notes", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.healthcheck_route", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.healthcheck_route", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.dimensions", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.dimensions", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.icon", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.icon", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.extra_info", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.extra_info", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.load_kong_service", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.load_kong_service", "kind": "function", "doc": "<p>Load kong services and routes.</p>\n\n<p>Load services and routes in database at Kong. This action does not\nremove other kongs end-points.</p>\n\n<p>Args\n    No Args.</p>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>list_service_id [list]: List of ids to reload routes on Kong.</p>\n</blockquote>\n\n<p>Return [bool]:\n    Return true.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">list_service_id</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.reload_kong_service", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.reload_kong_service", "kind": "function", "doc": "<p>Reload kong services, a small down time may occur.</p>\n\n<p>Remove and recreate all services and kong routes if list_service_id\nnot passed as argument.</p>\n\n<p>Args\n    No Args.</p>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>list_service_id [list]: List of ids to reload routes on Kong.</p>\n</blockquote>\n\n<p>Return [bool]:\n    Return true.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">list_service_id</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.create_service", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.create_service", "kind": "function", "doc": "<p>Create a Kong service to redirect calls.</p>\n\n<p>Save calls use same object to create or patch already created object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>service_url [str]:</strong>  URL of the service to which call to this service\nwill be redicted as is.</li>\n<li><strong>service_name [str]:</strong>  Unique name for the service</li>\n<li><strong>description [str]:</strong>  Unique description for the service.</li>\n<li><strong>notes [str]:</strong>  A long description for the service.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>healthcheck_route [str] = None: A health check end-point for the\n      service.\n  dimensions [dict] = {}: A dimensions for the service to help\n      quering.\n  extra_info [dict] = {}: Extra information to be saved with service.\n  icon [str] = None: An icon associated with the service.</p>\n</blockquote>\n\n<p>Returns [dict] -> dict:\n    Return a serialized KongService object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">service_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">service_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">notes</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">healthcheck_route</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dimensions</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">extra_info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.DoesNotExist", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.id", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongService.route_set", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongService.route_set", "kind": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute", "kind": "class", "doc": "<p>Routes registred on Kong API Gateway.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.availability", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.availability", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.order", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.order", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.service", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.service", "kind": "variable", "doc": "<p>Accessor to the related object on the forward side of a many-to-one or\none-to-one (via ForwardOneToOneDescriptor subclass) relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Child.parent</code> is a <code>ForwardManyToOneDescriptor</code> instance.</p>\n"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.route_url", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.route_url", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.route_name", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.route_name", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.route_kong_id", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.route_kong_id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.route_type", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.route_type", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.description", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.description", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.notes", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.notes", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.dimensions", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.dimensions", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.icon", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.icon", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.extra_info", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.extra_info", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.create_route", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.create_route", "kind": "function", "doc": "<p>Create a Kong route to redirect calls.</p>\n\n<p>Save calls use same object to create or patch already created object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>service_id [int]:</strong>  Id of the service associated with route on\nPumpWood.</li>\n<li><strong>route_url [str]:</strong>  Route URL to redirect the calls to service.</li>\n<li><strong>route_name [str]:</strong>  Unique name for the route.</li>\n<li><strong>route_type [str]:</strong>  Type of the route to create values must be in:\n['endpoint', 'aux', 'gui', 'static', 'admin']</li>\n<li><strong>description [str]:</strong>  Unique description for the service.</li>\n<li><strong>notes [str]:</strong>  A long description for the service.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>availability [str]: If route should be avaiable at frontend.\n  strip_path [bool]: If kong will strip path when routing downstream.\n  icon [str] = None: An icon associated with the service.\n  dimensions [dict] = {}: A dimensions for the service to help\n      quering.\n  extra_info [dict] = {}: Extra information to be saved with\n      service.</p>\n</blockquote>\n\n<p>Returns [dict]:\n    Return a serialized KongRoute object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">service_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">route_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">route_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">route_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">notes</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">availability</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">strip_path</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dimensions</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">extra_info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.DoesNotExist", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.DoesNotExist", "kind": "class", "doc": "<p>The requested object does not exist</p>\n", "bases": "django.core.exceptions.ObjectDoesNotExist"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.MultipleObjectsReturned", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.MultipleObjectsReturned", "kind": "class", "doc": "<p>The query returned multiple objects when only one was expected.</p>\n", "bases": "django.core.exceptions.MultipleObjectsReturned"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.get_availability_display", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.get_availability_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.get_route_type_display", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.get_route_type_display", "kind": "function", "doc": "<p>Method descriptor with partial application of the given arguments\nand keywords.</p>\n\n<p>Supports wrapping existing descriptors and handles non-descriptor\ncallables as instance methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.id", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.id", "kind": "function", "doc": "<p>A wrapper for a deferred-loading field. When the value is read from this\nobject the first time, the query is executed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.models.KongRoute.permission_set", "modulename": "pumpwood_djangoauth.system.models", "qualname": "KongRoute.permission_set", "kind": "variable", "doc": "<p>Accessor to the related objects manager on the reverse side of a\nmany-to-one relation.</p>\n\n<p>In the example::</p>\n\n<pre><code>class Child(Model):\n    parent = ForeignKey(Parent, related_name='children')\n</code></pre>\n\n<p><code>Parent.children</code> is a <code>ReverseManyToOneDescriptor</code> instance.</p>\n\n<p>Most of the implementation is delegated to a dynamically defined manager\nclass built by <code>create_forward_many_to_many_manager()</code> defined below.</p>\n"}, {"fullname": "pumpwood_djangoauth.system.views", "modulename": "pumpwood_djangoauth.system.views", "kind": "module", "doc": "<p>Create views for system end-points.</p>\n"}, {"fullname": "pumpwood_djangoauth.system.views.view__get_kong_routes", "modulename": "pumpwood_djangoauth.system.views", "qualname": "view__get_kong_routes", "kind": "function", "doc": "<p>Get kong routes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.views.view__get_registred_endpoints", "modulename": "pumpwood_djangoauth.system.views", "qualname": "view__get_registred_endpoints", "kind": "function", "doc": "<p>Filter end-point to expose to frontend.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.views.view__dummy_call", "modulename": "pumpwood_djangoauth.system.views", "qualname": "view__dummy_call", "kind": "function", "doc": "<p>Expose a dummy endpoint for testing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.views.view__dummy_raise", "modulename": "pumpwood_djangoauth.system.views", "qualname": "view__dummy_raise", "kind": "function", "doc": "<p>End-point to test error handling in Pumpwood.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongRoute", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongRoute", "kind": "class", "doc": "<p>Basic View-Set for pumpwood rest end-points.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">metabase.models</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboard</span>\n<span class=\"kn\">from</span> <span class=\"nn\">metabase.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">storage_object</span><span class=\"p\">,</span> <span class=\"n\">microservice</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RestMetabaseDashboard</span><span class=\"p\">(</span><span class=\"n\">PumpWoodRestService</span><span class=\"p\">):</span>\n    <span class=\"n\">endpoint_description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Metabase Dashboard&quot;</span>\n    <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Register and generate url to embed Metabase dashboards&quot;</span>\n\n    <span class=\"c1\"># Django model that will be mapped to this end-point</span>\n    <span class=\"n\">service_model</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboard</span>\n\n    <span class=\"c1\"># Serializer that will be used to dump model data</span>\n    <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n\n    <span class=\"c1\"># PumpwoodStorage object that will be used to save and retrieve</span>\n    <span class=\"c1\"># file data from storage.</span>\n    <span class=\"n\">storage_object</span> <span class=\"o\">=</span> <span class=\"n\">storage_object</span>\n\n    <span class=\"c1\"># PumpWoodMicroService object used to communicate with other</span>\n    <span class=\"c1\"># microservice if necessary. Ex: Trigger ETL Jobs on object</span>\n    <span class=\"c1\"># saving and update.</span>\n    <span class=\"n\">microservice</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span>\n\n    <span class=\"c1\"># Fields that will be considered as files and extensions that</span>\n    <span class=\"c1\"># will be accepted.</span>\n    <span class=\"n\">file_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;file&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xlsx&#39;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">###########################################################</span>\n    <span class=\"c1\"># Gui this information will be returned at retrieve_options</span>\n    <span class=\"c1\"># to help frontend correctly render app frontend.</span>\n    <span class=\"c1\"># Set field sets, grouping the fields and hiding those that</span>\n    <span class=\"c1\"># ar not listed on fieldsets</span>\n    <span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># This fields will be set as readonly if fill_options_validation</span>\n    <span class=\"c1\"># is called with query parameter `?user_type=gui`</span>\n    <span class=\"n\">gui_readonly</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;updated_by_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Indication how the object could be presented to user</span>\n    <span class=\"n\">gui_verbose_field</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{pk}</span><span class=\"s1\"> | </span><span class=\"si\">{description}</span><span class=\"s1\">&#39;</span>\n</code></pre>\n</div>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongRoute.endpoint_description", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongRoute.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;Kong Route&#x27;"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongRoute.dimensions", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongRoute.dimensions", "kind": "variable", "doc": "<p>Dimensions associated with end-points. This information will be saved\nat KongRoute dimensions.</p>\n", "annotation": ": dict", "default_value": "{&#x27;microservice&#x27;: &#x27;pumpwood-auth-app&#x27;, &#x27;service_type&#x27;: &#x27;core&#x27;, &#x27;service&#x27;: &#x27;auth&#x27;, &#x27;type&#x27;: &#x27;kong&#x27;, &#x27;sub_type&#x27;: &#x27;service&#x27;}"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongRoute.icon", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongRoute.icon", "kind": "variable", "doc": "<p>Icon associated with model class. This information will be saved\nat KongRoute icon field.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongRoute.service_model", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongRoute.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.system.models.KongRoute&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongRoute.serializer", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongRoute.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.system.serializers.KongRouteSerializer&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongRoute.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongRoute.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;order&#x27;, &#x27;availability&#x27;, &#x27;route_type&#x27;, &#x27;service_id&#x27;, &#x27;route_name&#x27;, &#x27;description&#x27;, &#x27;notes&#x27;, &#x27;dimensions&#x27;]}, {&#x27;name&#x27;: &#x27;kong info&#x27;, &#x27;fields&#x27;: [&#x27;route_url&#x27;, &#x27;route_name&#x27;, &#x27;route_kong_id&#x27;]}, {&#x27;name&#x27;: &#x27;extra_info&#x27;, &#x27;fields&#x27;: [&#x27;extra_info&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongRoute.gui_readonly", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongRoute.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;route_type&#x27;, &#x27;service_id&#x27;, &#x27;route_name&#x27;, &#x27;description&#x27;, &#x27;notes&#x27;, &#x27;dimensions&#x27;, &#x27;route_url&#x27;, &#x27;route_name&#x27;, &#x27;route_kong_id&#x27;, &#x27;extra_info&#x27;]"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongRoute.gui_verbose_field", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongRoute.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk} | {route_name}&#x27;"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongRoute.save", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongRoute.save", "kind": "function", "doc": "<p>Save and update object acording to request.data.</p>\n\n<p>Object will be updated if request.data['pk'] is not None.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>Object to be saved. If a pk is set them the object will be updated,\nif pk is None or not set a new object will be created.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Serialized new/updated object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'Object model class diferent from {service_model} :\n{service_model}'. Indicates that the end-point and the\nmodel_class of the object are impatible.</li>\n<li><strong>PumpWoodObjectSavingException:</strong>  'Error when validating fields when saving object'. Indicates\nthat there were error when validating object\nat the serializer. Error payload will have the fields with\nerror as keys of the dictonary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongService", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongService", "kind": "class", "doc": "<p>Basic View-Set for pumpwood rest end-points.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">metabase.models</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboard</span>\n<span class=\"kn\">from</span> <span class=\"nn\">metabase.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">storage_object</span><span class=\"p\">,</span> <span class=\"n\">microservice</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RestMetabaseDashboard</span><span class=\"p\">(</span><span class=\"n\">PumpWoodRestService</span><span class=\"p\">):</span>\n    <span class=\"n\">endpoint_description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Metabase Dashboard&quot;</span>\n    <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Register and generate url to embed Metabase dashboards&quot;</span>\n\n    <span class=\"c1\"># Django model that will be mapped to this end-point</span>\n    <span class=\"n\">service_model</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboard</span>\n\n    <span class=\"c1\"># Serializer that will be used to dump model data</span>\n    <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n\n    <span class=\"c1\"># PumpwoodStorage object that will be used to save and retrieve</span>\n    <span class=\"c1\"># file data from storage.</span>\n    <span class=\"n\">storage_object</span> <span class=\"o\">=</span> <span class=\"n\">storage_object</span>\n\n    <span class=\"c1\"># PumpWoodMicroService object used to communicate with other</span>\n    <span class=\"c1\"># microservice if necessary. Ex: Trigger ETL Jobs on object</span>\n    <span class=\"c1\"># saving and update.</span>\n    <span class=\"n\">microservice</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span>\n\n    <span class=\"c1\"># Fields that will be considered as files and extensions that</span>\n    <span class=\"c1\"># will be accepted.</span>\n    <span class=\"n\">file_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;file&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xlsx&#39;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">###########################################################</span>\n    <span class=\"c1\"># Gui this information will be returned at retrieve_options</span>\n    <span class=\"c1\"># to help frontend correctly render app frontend.</span>\n    <span class=\"c1\"># Set field sets, grouping the fields and hiding those that</span>\n    <span class=\"c1\"># ar not listed on fieldsets</span>\n    <span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># This fields will be set as readonly if fill_options_validation</span>\n    <span class=\"c1\"># is called with query parameter `?user_type=gui`</span>\n    <span class=\"n\">gui_readonly</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;updated_by_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Indication how the object could be presented to user</span>\n    <span class=\"n\">gui_verbose_field</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{pk}</span><span class=\"s1\"> | </span><span class=\"si\">{description}</span><span class=\"s1\">&#39;</span>\n</code></pre>\n</div>\n", "bases": "pumpwood_djangoviews.views.PumpWoodRestService"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongService.endpoint_description", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongService.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "&#x27;Kong Services&#x27;"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongService.dimensions", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongService.dimensions", "kind": "variable", "doc": "<p>Dimensions associated with end-points. This information will be saved\nat KongRoute dimensions.</p>\n", "annotation": ": dict", "default_value": "{&#x27;microservice&#x27;: &#x27;pumpwood-auth-app&#x27;, &#x27;service_type&#x27;: &#x27;core&#x27;, &#x27;service&#x27;: &#x27;auth&#x27;, &#x27;type&#x27;: &#x27;kong&#x27;, &#x27;sub_type&#x27;: &#x27;service&#x27;}"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongService.icon", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongService.icon", "kind": "variable", "doc": "<p>Icon associated with model class. This information will be saved\nat KongRoute icon field.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongService.service_model", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongService.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model", "default_value": "&lt;class &#x27;pumpwood_djangoauth.system.models.KongService&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongService.serializer", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongService.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "default_value": "&lt;class &#x27;pumpwood_djangoauth.system.serializers.KongServiceSerializer&#x27;&gt;"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongService.gui_retrieve_fieldset", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongService.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "[{&#x27;name&#x27;: &#x27;main&#x27;, &#x27;fields&#x27;: [&#x27;order&#x27;, &#x27;service_name&#x27;, &#x27;description&#x27;, &#x27;notes&#x27;, &#x27;description&#x27;, &#x27;dimensions&#x27;]}, {&#x27;name&#x27;: &#x27;routes&#x27;, &#x27;fields&#x27;: [&#x27;route_set&#x27;]}, {&#x27;name&#x27;: &#x27;kong info&#x27;, &#x27;fields&#x27;: [&#x27;service_kong_id&#x27;, &#x27;service_url&#x27;, &#x27;healthcheck_route&#x27;]}, {&#x27;name&#x27;: &#x27;extra_info&#x27;, &#x27;fields&#x27;: [&#x27;extra_info&#x27;]}]"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongService.gui_readonly", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongService.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;extra_info&#x27;, &#x27;route_set&#x27;]"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongService.gui_verbose_field", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongService.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;{pk} | {service_name}&#x27;"}, {"fullname": "pumpwood_djangoauth.system.views.RestKongService.save", "modulename": "pumpwood_djangoauth.system.views", "qualname": "RestKongService.save", "kind": "function", "doc": "<p>Save and update object acording to request.data.</p>\n\n<p>Object will be updated if request.data['pk'] is not None.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>Object to be saved. If a pk is set them the object will be updated,\nif pk is None or not set a new object will be created.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Serialized new/updated object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'Object model class diferent from {service_model} :\n{service_model}'. Indicates that the end-point and the\nmodel_class of the object are impatible.</li>\n<li><strong>PumpWoodObjectSavingException:</strong>  'Error when validating fields when saving object'. Indicates\nthat there were error when validating object\nat the serializer. Error payload will have the fields with\nerror as keys of the dictonary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoauth.system.views.ServeMediaFiles", "modulename": "pumpwood_djangoauth.system.views", "qualname": "ServeMediaFiles", "kind": "class", "doc": "<p>Class to serve files using Pumpwood Storage Object.</p>\n\n<p>It checks for user authentication and serve files using streaming\nrequest.</p>\n"}, {"fullname": "pumpwood_djangoauth.system.views.ServeMediaFiles.as_view", "modulename": "pumpwood_djangoauth.system.views", "qualname": "ServeMediaFiles.as_view", "kind": "function", "doc": "<p>Return a view function using storage_object set on object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();